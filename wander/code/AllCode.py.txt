#WANDER 25/11/23
#LUCIANO 25/11/23
#AllCode

<launch>
  <!-- Image processing methods -->
  <arg name="filter" default="blur"/>
  <!-- OPTIONS: median blur gaussian bilateral -->
  <arg name="kernel" default="3"/>

  <arg name="edge" default="canny"/>
  <!-- OPTIONS: sobel canny laplacian -->

  <arg name="line" default="houghlines"/>
  <arg name="houghThreshold" default="150"/>

  <!-- Debug options -->
  <arg name="show_images" default="true"/>

  <!-- Image processing node -->
  <node pkg="plt_cv" type="img_proc" name="image_preprocessing_node" output="screen">
    <param name="filter_method" value="$(arg filter)" />
    <param name="filter_method_kernel_sz" value="$(arg kernel)" />
    <param name="edge_method" value="$(arg edge)" />
    <param name="lineDetector_method" value="$(arg line)" />
    <param name="hough_treshold" value="$(arg houghThreshold)" />
    <param name="show_images" value="$(arg show_images)" />
  </node>

</launch>
############################################
<launch>
  <arg name="cables_max_dist" default="4"/>

  <!-- Debug options -->
  <arg name="show_images" default="true"/>

  <!-- Image size -->
  <param name="image_H" value="360" />
  <param name="image_W" value="640" />

  <!-- Image processing node -->
  <node pkg="plt_cv" type="line_tracking" name="line_tracking_node" output="screen">
    <param name="cables_max_dist" value="$(arg cables_max_dist)" />
    <param name="show_images" value="$(arg show_images)" />
  </node>
</launch>
############################################
#WANDER 25/11/23
#LUCIANO 25/11/23
#Canny Edge Detection 

import cv2
import numpy as np
import sys

class EdgeDetection:
    def __init__(self, min, max):
        self.get_edges = self.canny

    def canny(self, img):
        return cv2.Canny(img, min, max)

def usage():
    print ('pls run:\npython edge.py <algorithm>\nwhere <algorithm> can be sobel, canny or laplacian')

if __name__ == '__main__':
    if (len(sys.argv) < 2):
        print usage()
        exit(0)
    edge = EdgeDetection(sys.argv[1],100,200)

    img = cv2.imread('./tests/image_raw_0.png', 0)
    img = cv2.blur(img, (3,3))

    cv2.imshow("original", img)
    
    image_edges = edge.get_edges(img)
    cv2.imshow("edges", image_edges)
    cv2.waitKey(0)
############################################
#WANDER 25/11/23
#LUCIANO 25/11/23
#Filter Noise

import cv2
import numpy as np
import sys

class FilterNoise:
    def __init__(self, kernel_size):
        self.kernel_size = kernel_size       
        self.get_img = self.bilateral

    def bilateral(self, img):
        return cv2.bilateralFilter(img, self.kernel_size, 75, 75) # geralmente kernel_size eh < 10

if __name__ == '__main__':
    from matplotlib import pyplot as plt

    print ('test filter')

    images = ['image_raw_1.png', 'image_raw_2.png', 'image_raw_3.png', 'image_raw_0.png']

    for file in images:
        img = cv2.imread("./tests/" + str(file))
        kernel_size = (int)(sys.argv[1])

        img_H, img_W, _ = img.shape
    
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
        F = FilterNoise(kernel_size)
        R = F.get_img(gray)

        cv2.imshow("bilateral", R)
        cv2.waitKey(0)
        cv2.destroyWindow("bilateral")

############################################
#WANDER 25/11/23
#LUCIANO 25/11/23
#Hough transform (HT) Line Detection

import cv2
import numpy as np
from edge import EdgeDetection
from filter_noise import FilterNoise
from utils import *
import sys

class LineDetector:
    def __init__(self, threshold):
        self.ht_rho = 1
        self.ht_theta = np.pi / 180
        self.ht_threshold = threshold
        self.get_lines = self.houghlines

    def houghlines(self, img):
        return cv2.HoughLines(img, self.ht_rho,  self.ht_theta,  self.ht_threshold)

if __name__ == '__main__':
    images = ['image_raw_1.png', 'image_raw_2.png', 'image_raw_3.png', 'image_raw_0.png']
    
    filterObj     = FilterNoise(3)
    edgesObj      = EdgeDetection(100,200)
    lineDetectorObj = LineDetector()

    for file in images:
        img = cv2.imread("./tests/" + str(file))

        img_H, img_W, _ = img.shape
        
        # image pre processing step
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        filtered = filterObj.get_img(gray)
        edges = edgesObj.get_edges(filtered)
        
        # hough lines detection step
        hlines = lineDetectorObj.get_lines(edges)

        lines = set_plt_msgs_Lines(hlines)
        img_lines = draw_lines(img, lines, RED)
        
        rt = get_best_lines(lines, 3)
        for rho, theta in rt:
            pt1, pt2 = get_points( rho, theta )
            cv2.line(img_lines, pt1, pt2, BLUE, thickness=2)
            print(rho, theta)

        cv2.imshow("houghlines", img_lines)
        cv2.waitKey(0)
        print("\n\n\n")
############################################
#WANDER 25/11/23
#LUCIANO 25/11/23
#Utils

import cv2
import numpy as np
import sys

from plt_msgs.msg import Line
from plt_msgs.msg import Lines

RHO_MIN = 10
THETA_MAX = (5.0*np.pi/180.0)

RED   = (0,0,255)
GREEN = (0,255,0)
BLUE  = (255,0,0)

def soma(u, v):
    return (u[0] + v[0], u[1] + v[1])

def subtrai(u, v):
    return (u[0] - v[0], u[1] - v[1])

def cross(u, v):
    return u[0]*v[1] - u[1]*v[0]

def dot(u, v):
    return u[0]*v[0] + u[1]*v[1]

def distance(u, v):
    uv = subtrai(u, v)
    return int(np.sqrt(dot(uv, uv)))

def rad2deg(rad):
    ''' Convert radians to degrees '''
    deg = rad * 180.0/np.pi
    return deg

def deg2rad(deg):
    ''' Convert degrees to radians '''
    rad = deg * np.pi/180.0
    return rad

def set_plt_msgs_Lines(std_hough_lines):
    ''' Populate a plt_msgs/Lines message with the content of Hough Lines return '''
    lines = []

    for line in std_hough_lines:
        for rho,theta in line:
            aux = Line()
            aux.rho, aux.theta = rho, theta
            lines.append(aux)
    return lines

def get_head(pt, rho, theta):
    x1, y1 = pt
    pt2 = ( (int)(x1+np.cos(theta)*rho),  (int)(y1+np.sin(theta)*rho) )
    return pt2

def get_points(rho, theta):
    ''' Return a point in image plane give the rho, theta returned by Hough Transform '''
    a = np.cos(theta)
    b = np.sin(theta)
    x0 = a*rho
    y0 = b*rho
    pt1 = ( int(x0+1000*(-b)), int(y0+1000*(a)) )
    pt2 = ( int(x0-1000*(-b)), int(y0-1000*(a)) )
    return (pt1, pt2)

def get_best_lines(lines, n):
    ''' Returns the best N lines from Hough Space in a way that all N lines are parallel to
    to each other and not coincident '''
    
    rt = []
    x = len(lines)
    for i in range(x):
        if len(rt) == n:
            break
        ok = 1
        rho, theta = lines[i].rho, lines[i].theta
        for r, t in rt:
            if( abs(r - rho) > RHO_MIN and abs(t - theta) < THETA_MAX ):
                pass
            else:
                ok = 0
                break
        if( ok ):
            rt.append( (rho, theta) )
    return rt

def draw_lines(img, lines, cor=RED, thickness=1):
    ''' Give a array of lines of the type plt_msgs/Line and a img, this function will draw
    the correspondent lines '''
    if ( lines is not None ):
        img_lines = img.copy()
        n = len(lines)
        for i in range(n):
            rho, theta   = lines[i].rho,  lines[i].theta
            pt1, pt2 = get_points(rho, theta)
            cv2.line(img_lines, pt1, pt2, cor, thickness)
    return img_lines

if __name__ == '__main__':

    H = 360
    W = 640

    h = 360/2
    w = 640/2

    img = np.zeros( (H, W, 3), np.uint8 )  
    
    cv2.circle(img, (w, h), 5, (0,0,255))
    
    ww, hh = get_head( (w, h), -50, deg2rad(45) )
    
    cv2.circle(img, (ww, hh), 5, (255,0,0))

    cv2.imshow("img", img)
    cv2.waitKey(0)
############################################
cmake_minimum_required(VERSION 2.8.3)
project(plt_cv)

find_package(catkin REQUIRED COMPONENTS
  cv_bridge
  rospy
  sensor_msgs
  plt_msgs
)

catkin_python_setup()

catkin_package()

include_directories(
  ${catkin_INCLUDE_DIRS}
)
############################################
<?xml version="1.0"?>
<package format="2">
  <name>plt_cv</name>
  <version>0.0.0</version>
  <description>The plt_cv package</description>

  <maintainer email="ubuntu@todo.todo">ubuntu</maintainer>

  <license>TODO</license>

  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>cv_bridge</build_depend>
  <build_depend>rospy</build_depend>
  <build_depend>sensor_msgs</build_depend>
  <build_depend>image_transport</build_depend>
  <build_depend>plt_msgs</build_depend>


  <build_export_depend>cv_bridge</build_export_depend>
  <build_export_depend>rospy</build_export_depend>
  <build_export_depend>sensor_msgs</build_export_depend>
  <build_export_depend>image_transport</build_export_depend>
  <build_export_depend>plt_msgs</build_export_depend>

  <exec_depend>cv_bridge</exec_depend>
  <exec_depend>rospy</exec_depend>
  <exec_depend>sensor_msgs</exec_depend>
  <exec_depend>image_transport</exec_depend>
  <exec_depend>plt_msgs</exec_depend>

  <export>
  </export>

</package>
############################################
#!/usr/bin/env python

from distutils.core import setup
from catkin_pkg.python_setup import generate_distutils_setup

setup_args = generate_distutils_setup(
    packages=['plt_cv'],
    package_dir={'': 'src'},
)

setup(**setup_args)
############################################
<launch>
    <arg name="model" default="pole"/>

    <!-- urdf_tutorial package should be installed -->
    <include file="$(find urdf_tutorial)/launch/display.launch">
        <arg name="model" value="$(find plt_description)/urdf/$(arg model)/$(arg model).urdf.xacro"/>
    </include>

</launch>
############################################
<?xml version="1.0"?>
<robot name="pole" 
  xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!--
    To generate pole.urdf
      rosrun xacro xacro - -inorder pole.urdf.xacro > pole.urdf

    To generate the pole.sdf
      gz sdf -p  ./pole.urdf> ./pole.sdf
    
    then, create the model in the ~/.gazebo/models folder
  -->

  <xacro:property name="M_PI" value="3.1415926535897931" />

  <xacro:property name="pole_height" value="10" />
  <xacro:property name="pole_mass" value="100" />
  <xacro:property name="pole_radius" value="0.25" />

  <xacro:property name="top_length" value="4.2" />
  <xacro:property name="top_height" value="0.4" />
  <xacro:property name="top_width" value="0.4" />


  <!-- materials for visualization -->
  <xacro:include filename="$(find plt_description)/urdf/materials.urdf.xacro" />

  <!-- cables macros -->
  <xacro:include filename="$(find plt_description)/urdf/cable.urdf.xacro" />

  <gazebo>
    <static>true</static>
  </gazebo>

  <link name="footprint"/>
  <!-- Link Falso -->

  <joint name="base_joint" type="fixed">
    <parent link="footprint"/>
    <child link="base_link"/>
  </joint>

  <!-- pole -->
  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="${pole_height}" radius="${pole_radius}"/>
      </geometry>
      <material name="Brown"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="${pole_height}" radius="${pole_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${pole_mass}"/>
      <inertia ixx="${0.25*pole_mass*pole_radius*pole_radius + 0.083333*pole_mass*pole_height*pole_height}" ixy="0.0" ixz="0.0" iyy="${0.25*pole_mass*pole_radius*pole_radius + 0.083333*pole_mass*pole_height*pole_height}" iyz="0.0" izz="${0.5*pole_mass*pole_radius*pole_radius}" />
    </inertial>
  </link>

  <!-- Trocando a cor -->
	<gazebo reference="base_link">
		<material>Gazebo/Orange</material>
	</gazebo>

  <!-- Apoio dos Cabos-->
  <joint name="pole_to_top" type="fixed">
    <parent link="base_link"/>
    <child link="top"/>
    <origin xyz="0 0 ${pole_height/2}" rpy="0 0 0" />
  </joint>

  <link name="top">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
      <geometry>
        <box size="${top_length} ${top_height} ${top_width}"/>
      </geometry>
      <material name="Brown"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
      <geometry>
        <box size="${top_length} ${top_height} ${top_width}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>

  <!-- Trocando a cor -->
	<gazebo reference="top">
		<material>Gazebo/Orange</material>
	</gazebo>


  <!-- Cables -->
  <xacro:cable_macro prefix="left" parent="top" reflect="1" parent_length="${top_length}"   cable_length="30"/>
  <xacro:cable_macro prefix="center" parent="top" reflect="0" parent_length="${top_length}" cable_length="30"/>
  <xacro:cable_macro prefix="right" parent="top" reflect="-1" parent_length="${top_length}" cable_length="30"/>


</robot>
############################################
<?xml version="1.0"?>
<robot name="pole_without_cables" 
  xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!--
    To generate pole.urdf
      rosrun xacro xacro - -inorder pole.urdf.xacro > pole.urdf

    To generate the pole.sdf
      gz sdf -p  ./pole.urdf> ./pole.sdf
    
    then, create the model in the ~/.gazebo/models folder
  -->

  <xacro:property name="M_PI" value="3.1415926535897931" />

  <xacro:property name="pole_height" value="10" />
  <xacro:property name="pole_mass" value="100" />
  <xacro:property name="pole_radius" value="0.25" />

  <xacro:property name="top_length" value="4.2" />
  <xacro:property name="top_height" value="0.4" />
  <xacro:property name="top_width" value="0.4" />


  <!-- materials for visualization -->
  <xacro:include filename="$(find plt_description)/urdf/materials.urdf.xacro" />

  <!-- cables macros -->
  <xacro:include filename="$(find plt_description)/urdf/cable.urdf.xacro" />

  <gazebo>
    <static>true</static>
  </gazebo>

  <link name="footprint"/>
  <!-- Link Falso -->

  <joint name="base_joint" type="fixed">
    <parent link="footprint"/>
    <child link="base_link"/>
  </joint>

  <!-- pole -->
  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="${pole_height}" radius="${pole_radius}"/>
      </geometry>
      <material name="Brown"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="${pole_height}" radius="${pole_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${pole_mass}"/>
      <inertia ixx="${0.25*pole_mass*pole_radius*pole_radius + 0.083333*pole_mass*pole_height*pole_height}" ixy="0.0" ixz="0.0" iyy="${0.25*pole_mass*pole_radius*pole_radius + 0.083333*pole_mass*pole_height*pole_height}" iyz="0.0" izz="${0.5*pole_mass*pole_radius*pole_radius}" />
    </inertial>
  </link>

  <!-- Trocando a cor -->
	<gazebo reference="base_link">
		<material>Gazebo/Orange</material>
	</gazebo>

  <!-- Apoio dos Cabos-->
  <joint name="pole_to_top" type="fixed">
    <parent link="base_link"/>
    <child link="top"/>
    <origin xyz="0 0 ${pole_height/2}" rpy="0 0 0" />
  </joint>

  <link name="top">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
      <geometry>
        <box size="${top_length} ${top_height} ${top_width}"/>
      </geometry>
      <material name="Brown"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
      <geometry>
        <box size="${top_length} ${top_height} ${top_width}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>

  <!-- Trocando a cor -->
	<gazebo reference="top">
		<material>Gazebo/Orange</material>
	</gazebo>

  <!-- Cables -->
  <!--
  <xacro:cable_macro prefix="center" parent="top" reflect="0" parent_length="${top_length}"/>
  <xacro:cable_macro prefix="left" parent="top" reflect="1" parent_length="${top_length}"/>
  <xacro:cable_macro prefix="right" parent="top" reflect="-1" parent_length="${top_length}"/>
  -->

</robot>
############################################
<?xml version="1.0"?>

<!-- XML namespaces -->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:property name="M_PI" value="3.1415926535897931" />
    <xacro:property name="cylinder_radius" value="0.015" />

    <!-- ============================   Cable Macro   ============================ -->
    <xacro:macro name="cable_macro" params="prefix parent reflect parent_length cable_length">
        <joint name="${prefix}_cable_joint" type="fixed">
            <origin xyz="${cable_length/2} ${0.95*reflect*parent_length/2.0} 0" rpy="0 ${M_PI/2} 0" />
            <parent link="${parent}"/>
            <child link="${prefix}_cable_link"/>
        </joint>

        <link name="${prefix}_cable_link">
            <inertial>
                <mass value="0.1"/>
                <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
            </inertial>
            <visual>
                <geometry>
                    <cylinder length="${cable_length}" radius="${cylinder_radius}"/>
                </geometry>
                <origin rpy="0 0 0" xyz="0 0 0"/>
                <material name="cinza"/>
            </visual>
            <collision>
                <geometry>
                    <cylinder length="${cable_length}" radius="${cylinder_radius}"/>
                </geometry>
                <origin rpy="0 0 0" xyz="0 0 0"/>
                <material name="cinza"/>
            </collision>
        </link>
    
        <!-- Trocando a cor -->
        <gazebo reference="${prefix}_cable_link">
            <material>Gazebo/Black</material>
        </gazebo>
    </xacro:macro>

</robot>
############################################
<?xml version="1.0"?>
<robot>

  <material name="Blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  
  <material name="Green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  
  <material name="Grey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>
  
  <material name="Grey2">
    <color rgba="0.9 0.9 0.9 1.0"/>
  </material>
  
  <material name="Red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  
  <material name="White">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>

  <material name="Black">
    <color rgba="0.1 0.1 0.1 1.0"/>
  </material>

  <material name="LightGrey">
    <color rgba="0.6 0.6 0.6 1.0"/>
  </material>

  <material name="Brown">
    <color rgba="0.67 0.45 0.22 1.0"/>
  </material>
  
</robot>
############################################
cmake_minimum_required(VERSION 2.8.3)
project(plt_description)

find_package(catkin REQUIRED)

catkin_package(
)

include_directories(
)
############################################
<?xml version="1.0"?>
<package format="2">
  <name>plt_description</name>
  <version>0.0.0</version>
  <description>The plt_description package</description>

  <maintainer email="ubuntu@todo.todo">ubuntu</maintainer>

  <license>TODO</license>

  <buildtool_depend>catkin</buildtool_depend>

  <export>
  </export>
</package>
############################################
<launch>

    <!-- Gazebo sim and quadrotor model configs -->
    <arg name="vehicle" default="typhoon_h480"/>
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>

    <arg name="world" default="grass"/>
    <arg name="gui" default="true"/>

    <include file="$(find px4)/launch/mavros_posix_sitl.launch">
        <arg name="world" value="$(find plt_gazebo)/worlds/$(arg world).world"/>
        <arg name="vehicle" value="$(arg vehicle)"/>
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="R" value="$(arg R)"/>
        <arg name="P" value="$(arg P)"/>
        <arg name="Y" value="$(arg Y)"/>
        <arg name="gui" value="$(arg gui)"/>
    </include>

</launch>
############################################
<launch>
    
    <arg name="world" default="$(find plt_gazebo)/worlds/custom.world"/>

    <!-- gazebo configs -->
    <arg name="gui" default="true"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="respawn_gazebo" default="false"/>
    
    <!-- Gazebo sim -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    </include>

</launch>
############################################
<?xml version="1.0"?>
<model>
  <name>plt_pole</name>
  <version>1.0</version>
  <sdf version='1.0'>pole.sdf</sdf>

  <author>
   <name>Luciano do Vale Ribeiro</name>
   <email>luciano-vale@hotmail.com</email>
  </author>

  <description>
    This is a model of a simple power line pole.
  </description>
</model>
############################################
<sdf version='1.6'>
  <model name='pole'>
    <link name='footprint'>
      <pose frame=''>0 0 0 0 -0 0</pose>
      <inertial>
        <pose frame=''>0.044423 0 0.064166 0 -0 0</pose>
        <mass>101.3</mass>
        <inertia>
          <ixx>871.771</ixx>
          <ixy>-4.44089e-16</ixy>
          <ixz>-22.2113</ixz>
          <iyy>938.276</iyy>
          <iyz>0</iyz>
          <izz>75.2211</izz>
        </inertia>
      </inertial>
      <collision name='footprint_fixed_joint_lump__base_link_collision'>
        <pose frame=''>0 0 0 0 -0 0</pose>
        <geometry>
          <cylinder>
            <length>10</length>
            <radius>0.25</radius>
          </cylinder>
        </geometry>
        <surface>
          <contact>
            <ode/>
          </contact>
          <friction>
            <ode/>
          </friction>
        </surface>
      </collision>
      <collision name='footprint_fixed_joint_lump__top_collision_1'>
        <pose frame=''>0 0 5 0 -0 1.5708</pose>
        <geometry>
          <box>
            <size>4.2 0.4 0.4</size>
          </box>
        </geometry>
        <surface>
          <contact>
            <ode/>
          </contact>
          <friction>
            <ode/>
          </friction>
        </surface>
      </collision>
      <collision name='footprint_fixed_joint_lump__center_cable_link_collision_2'>
        <pose frame=''>15 0 5 3.14159 1.57079 3.14159</pose>
        <geometry>
          <cylinder>
            <length>30</length>
            <radius>0.015</radius>
          </cylinder>
        </geometry>
        <surface>
          <contact>
            <ode/>
          </contact>
          <friction>
            <ode/>
          </friction>
        </surface>
      </collision>
      <collision name='footprint_fixed_joint_lump__left_cable_link_collision_3'>
        <pose frame=''>15 1.995 5 3.14159 1.57079 3.14159</pose>
        <geometry>
          <cylinder>
            <length>30</length>
            <radius>0.015</radius>
          </cylinder>
        </geometry>
        <surface>
          <contact>
            <ode/>
          </contact>
          <friction>
            <ode/>
          </friction>
        </surface>
      </collision>
      <collision name='footprint_fixed_joint_lump__right_cable_link_collision_4'>
        <pose frame=''>15 -1.995 5 3.14159 1.57079 3.14159</pose>
        <geometry>
          <cylinder>
            <length>30</length>
            <radius>0.015</radius>
          </cylinder>
        </geometry>
        <surface>
          <contact>
            <ode/>
          </contact>
          <friction>
            <ode/>
          </friction>
        </surface>
      </collision>
      <visual name='footprint_fixed_joint_lump__base_link_visual'>
        <pose frame=''>0 0 0 0 -0 0</pose>
        <geometry>
          <cylinder>
            <length>10</length>
            <radius>0.25</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Orange</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <visual name='footprint_fixed_joint_lump__top_visual_1'>
        <pose frame=''>0 0 5 0 -0 1.5708</pose>
        <geometry>
          <box>
            <size>4.2 0.4 0.4</size>
          </box>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Orange</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <visual name='footprint_fixed_joint_lump__center_cable_link_visual_2'>
        <pose frame=''>15 0 5 3.14159 1.57079 3.14159</pose>
        <geometry>
          <cylinder>
            <length>30</length>
            <radius>0.015</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <visual name='footprint_fixed_joint_lump__left_cable_link_visual_3'>
        <pose frame=''>15 1.995 5 3.14159 1.57079 3.14159</pose>
        <geometry>
          <cylinder>
            <length>30</length>
            <radius>0.015</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <visual name='footprint_fixed_joint_lump__right_cable_link_visual_4'>
        <pose frame=''>15 -1.995 5 3.14159 1.57079 3.14159</pose>
        <geometry>
          <cylinder>
            <length>30</length>
            <radius>0.015</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <velocity_decay/>
      <velocity_decay/>
      <velocity_decay/>
      <velocity_decay/>
      <gravity>1</gravity>
      <velocity_decay/>
      <self_collide>0</self_collide>
    </link>
    <static>1</static>
  </model>
</sdf>
############################################
<sdf version='1.6'>
  <model name='pole_without_cables'>
    <link name='footprint'>
      <pose frame=''>0 0 0 0 -0 0</pose>
      <inertial>
        <pose frame=''>0 0 0.049505 0 -0 0</pose>
        <mass>101</mass>
        <inertia>
          <ixx>860.645</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>860.645</iyy>
          <iyz>0</iyz>
          <izz>4.125</izz>
        </inertia>
      </inertial>
      <collision name='footprint_fixed_joint_lump__base_link_collision'>
        <pose frame=''>0 0 0 0 -0 0</pose>
        <geometry>
          <cylinder>
            <length>10</length>
            <radius>0.25</radius>
          </cylinder>
        </geometry>
        <surface>
          <contact>
            <ode/>
          </contact>
          <friction>
            <ode/>
          </friction>
        </surface>
      </collision>
      <collision name='footprint_fixed_joint_lump__top_collision_1'>
        <pose frame=''>0 0 5 0 -0 1.5708</pose>
        <geometry>
          <box>
            <size>4.2 0.4 0.4</size>
          </box>
        </geometry>
        <surface>
          <contact>
            <ode/>
          </contact>
          <friction>
            <ode/>
          </friction>
        </surface>
      </collision>
      <visual name='footprint_fixed_joint_lump__base_link_visual'>
        <pose frame=''>0 0 0 0 -0 0</pose>
        <geometry>
          <cylinder>
            <length>10</length>
            <radius>0.25</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Orange</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <visual name='footprint_fixed_joint_lump__top_visual_1'>
        <pose frame=''>0 0 5 0 -0 1.5708</pose>
        <geometry>
          <box>
            <size>4.2 0.4 0.4</size>
          </box>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Orange</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <velocity_decay/>
      <gravity>1</gravity>
      <velocity_decay/>
      <self_collide>0</self_collide>
    </link>
    <static>1</static>
  </model>
</sdf>
############################################
#!/bin/bash

# After making your own models in plt_description (.urdf),  use this script to convert then to .sdf

SRC=`rospack find plt_description`/urdf

DEST=`rospack find plt_gazebo`/models/pole
echo 'Generating pole.sdf'
echo $DEST
rosrun xacro xacro --inorder ${SRC}/pole/pole.urdf.xacro > /tmp/pole.urdf
gz sdf -p /tmp/pole.urdf > ${DEST}/pole.sdf

DEST=`rospack find plt_gazebo`/models/pole_wireless
echo 'Generating pole_wireless.sdf'
echo $DEST
rosrun xacro xacro --inorder $SRC/pole_wireless/pole_wireless.urdf.xacro > /tmp/pole.urdf
gz sdf -p /tmp/pole.urdf > $DEST/pole_wireless.sdf

rm /tmp/pole.urdf
echo 'Done.'
############################################
<?xml version="1.0" ?>
<sdf version="1.5">
  <world name="default">

    <!-- The values in the pose of the poles depends on the urdf file.
      The +5 in Z axis is due to the pole having 10m of height. This makes it to be above the ground.
      The +30 added for each pole is due to the fact that the cable lenght defined in the urdf is 30 meters.
      If you change theses values in URDF file, they shoyuld be changed here too...
    -->

    <gui fullscreen='0'>
      <camera name='user_camera'>
        <pose frame=''>-31.8377 3.70459 32.2947 0 0.525796 -0.019449</pose>
        <view_controller>orbit</view_controller>
        <projection_type>perspective</projection_type>
      </camera>
    </gui>

    <!-- A global light source -->
    <include>
      <uri>model://sun</uri>
    </include>

    <!-- Ground planes -->
    <include>
      <name>my_ground_plane1</name>
      <uri>model://my_ground_plane</uri>
      <pose>0 0 0 0 0 0</pose>
    </include>

    <include>
      <name>my_ground_plane2</name>
      <uri>model://my_ground_plane</uri>
      <pose>100 0 0 0 0 0</pose>
    </include>

    <include>
      <name>my_ground_plane3</name>
      <uri>model://my_ground_plane</uri>
      <pose>200 0 0 0 0 0</pose>
    </include>


    <!-- Poles -->
    <include>
      <uri>model://pole</uri>
      <pose>0 0 5 0 0 0</pose>
    </include>

    <include>
      <name>pole2</name>
      <uri>model://pole</uri>
      <pose>30 0 5 0 0 0</pose>
    </include>

    <include>
      <name>pole3</name>
      <uri>model://pole</uri>
      <pose>60 0 5 0 0 0</pose>
    </include>

    <include>
      <name>pole4</name>
      <uri>model://pole</uri>
      <pose>90 0 5 0 0 0</pose>
    </include>

    <include>
      <name>pole5</name>
      <uri>model://pole</uri>
      <pose>120 0 5 0 0 0</pose>
    </include>

    <include>
      <uri>model://pole_wireless</uri>
      <pose>150 0 5 0 0 0</pose>
    </include>


    <!-- Pine Tree -->
    <include>
      <uri>model://pine_tree</uri>
      <pose>10 -3 0 0 -0 0</pose>
      <name>PineTree0</name>
    </include>

    <include>
      <uri>model://pine_tree</uri>
      <pose>8 -5 0 0 -0 0</pose>
      <name>PineTree1</name>
    </include>

    <include>
      <uri>model://pine_tree</uri>
      <pose>15 8 0 0 -0 0</pose>
      <name>PineTree0</name>
    </include>

    <include>
      <uri>model://pine_tree</uri>
      <pose>6 6 0 0 -0 0</pose>
      <name>PineTree1</name>
    </include>


    <include>
      <uri>model://pine_tree</uri>
      <pose>4 -7 0 0 -0 0</pose>
      <name>PineTree2</name>
    </include>


    <include>
      <uri>model://pine_tree</uri>
      <pose>100 -3 0 0 -0 0</pose>
      <name>PineTree3</name>
    </include>

    <include>
      <uri>model://pine_tree</uri>
      <pose>90 -5 0 0 -0 0</pose>
      <name>PineTree4</name>
    </include>

    <include>
      <uri>model://pine_tree</uri>
      <pose>95 -7 0 0 -0 0</pose>
      <name>PineTree5</name>
    </include>


    <!-- Oak Tree -->

    <include>
      <uri>model://oak_tree</uri>
      <pose>25 8 0 0 -0 0</pose>
      <name>OakTree0</name>
    </include>

    <include>
      <uri>model://oak_tree</uri>
      <pose>30 17 0 0 -0 0</pose>
      <name>OakTree1</name>
    </include>

    <include>
      <uri>model://oak_tree</uri>
      <pose>20 -9 0 0 -0 0</pose>
      <name>OakTree0</name>
    </include>

    <include>
      <uri>model://oak_tree</uri>
      <pose>40 -15 0 0 -0 0</pose>
      <name>OakTree1</name>
    </include>

    <include>
      <uri>model://oak_tree</uri>
      <pose>50 -13 0 0 -0 0</pose>
      <name>OakTree2</name>
    </include>


    <!--
    <include>
      <uri>model://asphalt_plane</uri>
      <pose>0 20 0 0 0 0</pose>
      <name>asphalt_plane0</name>
    </include>

    <include>
      <uri>model://asphalt_plane</uri>
      <pose>20 20 0 0 0 0</pose>
      <name>asphalt_plane1</name>
    </include>

    <include>
      <uri>model://asphalt_plane</uri>
      <pose>40 20 0 0 0 0</pose>
      <name>asphalt_plane2</name>
    </include>

    <include>
      <uri>model://asphalt_plane</uri>
      <pose>60 20 0 0 0 0</pose>
      <name>asphalt_plane3</name>
    </include>

    <include>
      <uri>model://asphalt_plane</uri>
      <pose>80 20 0 0 0 0</pose>
      <name>asphalt_plane4</name>
    </include>

    <include>
      <uri>model://asphalt_plane</uri>
      <pose>100 15 0 0 0 0</pose>
      <name>asphalt_plane5</name>
    </include>
    -->


    <physics name='default_physics' default='0' type='ode'>
      <gravity>0 0 -9.8066</gravity>
      <ode>
        <solver>
          <type>quick</type>
          <iters>10</iters>
          <sor>1.3</sor>
          <use_dynamic_moi_rescaling>0</use_dynamic_moi_rescaling>
        </solver>
        <constraints>
          <cfm>0</cfm>
          <erp>0.2</erp>
          <contact_max_correcting_vel>100</contact_max_correcting_vel>
          <contact_surface_layer>0.001</contact_surface_layer>
        </constraints>
      </ode>
      <max_step_size>0.004</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>250</real_time_update_rate>
      <magnetic_field>6.0e-6 2.3e-5 -4.2e-5</magnetic_field>
    </physics>

  </world>
</sdf>
############################################
float32 rho
float32 theta
############################################
std_msgs/Header header
Line[] lines
uint32  len
############################################
std_msgs/Header header
float32 distance
float32 theta
uint32 lines_found
############################################
cmake_minimum_required(VERSION 2.8.3)
project(plt_msgs)

find_package(catkin REQUIRED COMPONENTS
  roscpp  
  rospy
  std_msgs
  message_generation
)

add_message_files(
  FILES
  Line.msg
  Lines.msg
  UavError.msg
)

generate_messages(
  DEPENDENCIES
  std_msgs
)

catkin_package(
  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime
)

include_directories(
  ${catkin_INCLUDE_DIRS}
)
############################################
<?xml version="1.0"?>
<package format="2">
  <name>plt_msgs</name>
  <version>0.0.0</version>
  <description>The plt_msgs package</description>

  <maintainer email="ubuntu@todo.todo">ubuntu</maintainer>

  <license>TODO</license>

  <buildtool_depend>catkin</buildtool_depend>
  
  <build_depend>rospy</build_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>std_msgs</build_depend>
  <build_depend>message_generation</build_depend>

  <build_export_depend>rospy</build_export_depend>
  <build_export_depend>roscpp</build_export_depend>
  <build_export_depend>std_msgs</build_export_depend>
  <build_export_depend>message_generation</build_export_depend>
  
  <exec_depend>rospy</exec_depend>
  <exec_depend>roscpp</exec_depend>
  <exec_depend>std_msgs</exec_depend>
  <exec_depend>message_runtime</exec_depend>

  <export>
  </export>
</package>
############################################
# Gerando gráficos
## Posição y real do VANT
### Um único gráfico

```bash
bag_graph.py -b missionZ20m.bag -y -6 6 -s /mavros/global_position/local/pose/pose/position/y
```

### Um único gráfico com duas medidas
```bash
bag_graph.py -b missionZ20m.bag -y -6 6 -s /mavros/global_position/local/pose/pose/position/y /mavros/global_position/local/pose/pose/position/z -c
```

### Dois gráficos com duas medidas
```bash
bag_graph.py -b missionZ20m.bag -y -6 6 -s /mavros/global_position/local/pose/pose/position/y /mavros/global_position/local/pose/pose/position/z
```
############################################
<launch>

    <arg name="date" default="2000-01-01-00:00:00" />
    <arg name="bagfile" default="none" />
    <arg name="edge" default="none" />
    <arg name="filter" default="none" />

    <arg name="path" default="$(find plt_resources)/logs" />
    <arg name="topics" default="" />

    <node pkg="rosbag" type="record" name="rosbag_record"
        args="record -O 
        $(arg path)/$(arg date)/$(arg bagfile)/$(arg edge)/$(arg filter)/log.bag
    
        $(arg topics)"
    />

</launch>
############################################
<launch>
    <!-- Rosbag configs-->
    <arg name="path" default="$(find plt_resources)/bagfiles/" />
    <arg name="bagfile" default="missionZ15-20-18" />
    <arg name="factor" default="1" />
    <arg name="start_sec" default="0" />


    <arg name="option" default=""/>

    <!-- <arg name="duration_sec" default="0" /> -->

    <!-- Play Bagfile -->
    <node pkg="rosbag" type="play" name="player" args="--clock -r $(arg factor) $(arg option) $(arg path)$(arg bagfile).bag" required="true" />
</launch>
############################################
{
    "fileType": "Plan",
    "geoFence": {
        "circles": [
        ],
        "polygons": [
        ],
        "version": 2
    },
    "groundStation": "QGroundControl",
    "mission": {
        "cruiseSpeed": 15,
        "firmwareType": 12,
        "hoverSpeed": 3,
        "items": [
            {
                "autoContinue": true,
                "command": 205,
                "doJumpId": 1,
                "frame": 2,
                "params": [
                    -90,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2
                ],
                "type": "SimpleItem"
            },
            {
                "autoContinue": true,
                "command": 178,
                "doJumpId": 2,
                "frame": 2,
                "params": [
                    1,
                    3,
                    -1,
                    0,
                    0,
                    0,
                    0
                ],
                "type": "SimpleItem"
            },
            {
                "AMSLAltAboveTerrain": 15,
                "Altitude": 15,
                "AltitudeMode": 1,
                "autoContinue": true,
                "command": 22,
                "doJumpId": 3,
                "frame": 3,
                "params": [
                    15,
                    0,
                    0,
                    null,
                    -22.4131489,
                    -45.4489555,
                    15
                ],
                "type": "SimpleItem"
            },
            {
                "AMSLAltAboveTerrain": 15,
                "Altitude": 15,
                "AltitudeMode": 1,
                "autoContinue": true,
                "command": 16,
                "doJumpId": 4,
                "frame": 3,
                "params": [
                    1,
                    0,
                    0,
                    null,
                    -22.4131489,
                    -45.4489059,
                    15
                ],
                "type": "SimpleItem"
            },
            {
                "AMSLAltAboveTerrain": 15,
                "Altitude": 15,
                "AltitudeMode": 1,
                "autoContinue": true,
                "command": 16,
                "doJumpId": 5,
                "frame": 3,
                "params": [
                    0,
                    0,
                    0,
                    null,
                    -22.4132347,
                    -45.4484329,
                    15
                ],
                "type": "SimpleItem"
            },
            {
                "AMSLAltAboveTerrain": 15,
                "Altitude": 15,
                "AltitudeMode": 1,
                "autoContinue": true,
                "command": 16,
                "doJumpId": 6,
                "frame": 3,
                "params": [
                    0,
                    0,
                    0,
                    null,
                    -22.4131393,
                    -45.4479637,
                    15
                ],
                "type": "SimpleItem"
            }
        ],
        "plannedHomePosition": [
            -22.4131468,
            -45.4489548,
            852
        ],
        "vehicleType": 2,
        "version": 2
    },
    "rallyPoints": {
        "points": [
        ],
        "version": 2
    },
    "version": 1
}
############################################
{
    "fileType": "Plan",
    "geoFence": {
        "circles": [
        ],
        "polygons": [
        ],
        "version": 2
    },
    "groundStation": "QGroundControl",
    "mission": {
        "cruiseSpeed": 15,
        "firmwareType": 12,
        "hoverSpeed": 3,
        "items": [
            {
                "autoContinue": true,
                "command": 205,
                "doJumpId": 1,
                "frame": 2,
                "params": [
                    -90,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2
                ],
                "type": "SimpleItem"
            },
            {
                "autoContinue": true,
                "command": 178,
                "doJumpId": 2,
                "frame": 2,
                "params": [
                    1,
                    3,
                    -1,
                    0,
                    0,
                    0,
                    0
                ],
                "type": "SimpleItem"
            },
            {
                "AMSLAltAboveTerrain": 20,
                "Altitude": 20,
                "AltitudeMode": 1,
                "autoContinue": true,
                "command": 22,
                "doJumpId": 3,
                "frame": 3,
                "params": [
                    15,
                    0,
                    0,
                    null,
                    -22.4131489,
                    -45.4489555,
                    20
                ],
                "type": "SimpleItem"
            },
            {
                "AMSLAltAboveTerrain": 20,
                "Altitude": 20,
                "AltitudeMode": 1,
                "autoContinue": true,
                "command": 16,
                "doJumpId": 4,
                "frame": 3,
                "params": [
                    5,
                    0,
                    0,
                    null,
                    -22.4131489,
                    -45.4489059,
                    20
                ],
                "type": "SimpleItem"
            },
            {
                "AMSLAltAboveTerrain": 20,
                "Altitude": 20,
                "AltitudeMode": 1,
                "autoContinue": true,
                "command": 16,
                "doJumpId": 5,
                "frame": 3,
                "params": [
                    0,
                    0,
                    0,
                    null,
                    -22.4132347,
                    -45.4484329,
                    20
                ],
                "type": "SimpleItem"
            },
            {
                "AMSLAltAboveTerrain": 20,
                "Altitude": 20,
                "AltitudeMode": 1,
                "autoContinue": true,
                "command": 16,
                "doJumpId": 6,
                "frame": 3,
                "params": [
                    0,
                    0,
                    0,
                    null,
                    -22.4131393,
                    -45.4479637,
                    20
                ],
                "type": "SimpleItem"
            }
        ],
        "plannedHomePosition": [
            -22.413192,
            -45.4490141,
            852
        ],
        "vehicleType": 2,
        "version": 2
    },
    "rallyPoints": {
        "points": [
        ],
        "version": 2
    },
    "version": 1
}
############################################
# Onboard parameters for Vehicle 1
#
# Stack: PX4 Pro
# Vehicle: Multi-Rotor
# Version: 1.9.2 
# Git Revision: 106905871d000000
#
# Vehicle-Id Component-Id Name Value Type
1	1	BAT_ADC_CHANNEL	-1	6
1	1	BAT_A_PER_V	15.391030311584472656	9
1	1	BAT_CAPACITY	-1.000000000000000000	9
1	1	BAT_CNT_V_CURR	0.000805664050858468	9
1	1	BAT_CNT_V_VOLT	0.000805664050858468	9
1	1	BAT_CRIT_THR	0.07000a000298023224	9
1	1	BAT_EMERGEN_THR	0.050000000745058060	9
1	1	BAT_LOW_THR	0.150000005960464478	9
1	1	BAT_N_CELLS	3	6
1	1	BAT_R_INTERNAL	-1.000000000000000000	9
1	1	BAT_SOURCE	0	6
1	1	BAT_V_CHARGED	4.050000190734863281	9
1	1	BAT_V_DIV	10.177939414978027344	9
1	1	BAT_V_EMPTY	3.500000000000000000	9
1	1	BAT_V_LOAD_DROP	0.300000011920928955	9
1	1	BAT_V_OFFS_CURR	0.000000000000000000	9
1	1	CAL_ACC0_EN	1	6
1	1	CAL_ACC0_ID	1376264	6
1	1	CAL_ACC0_XOFF	0.000000000000000000	9
1	1	CAL_ACC0_XSCALE	1.000000000000000000	9
1	1	CAL_ACC0_YOFF	0.000000000000000000	9
1	1	CAL_ACC0_YSCALE	1.000000000000000000	9
1	1	CAL_ACC0_ZOFF	0.000000000000000000	9
1	1	CAL_ACC0_ZSCALE	1.000000000000000000	9
1	1	CAL_ACC1_EN	1	6
1	1	CAL_ACC1_ID	1310728	6
1	1	CAL_ACC1_XOFF	0.000000000000000000	9
1	1	CAL_ACC1_XSCALE	1.000000000000000000	9
1	1	CAL_ACC1_YOFF	0.000000000000000000	9
1	1	CAL_ACC1_YSCALE	1.000000000000000000	9
1	1	CAL_ACC1_ZOFF	0.000000000000000000	9
1	1	CAL_ACC1_ZSCALE	1.000000000000000000	9
1	1	CAL_ACC_PRIME	1376264	6
1	1	CAL_AIR_CMODEL	0	6
1	1	CAL_AIR_TUBED_MM	1.500000000000000000	9
1	1	CAL_AIR_TUBELEN	0.200000002980232239	9
1	1	CAL_BARO_PRIME	0	6
1	1	CAL_GYRO0_EN	1	6
1	1	CAL_GYRO0_ID	2293768	6
1	1	CAL_GYRO0_XOFF	0.000000000000000000	9
1	1	CAL_GYRO0_XSCALE	1.000000000000000000	9
1	1	CAL_GYRO0_YOFF	0.000000000000000000	9
1	1	CAL_GYRO0_YSCALE	1.000000000000000000	9
1	1	CAL_GYRO0_ZOFF	0.000000000000000000	9
1	1	CAL_GYRO0_ZSCALE	1.000000000000000000	9
1	1	CAL_GYRO_PRIME	2293768	6
1	1	CAL_MAG0_ID	196616	6
1	1	CAL_MAG0_ROT	-1	6
1	1	CAL_MAG1_ID	0	6
1	1	CAL_MAG1_ROT	-1	6
1	1	CAL_MAG2_ID	0	6
1	1	CAL_MAG2_ROT	-1	6
1	1	CAL_MAG3_ID	0	6
1	1	CAL_MAG3_ROT	-1	6
1	1	CAL_MAG_PRIME	196616	6
1	1	CAL_MAG_SIDES	63	6
1	1	CBRK_AIRSPD_CHK	0	6
1	1	CBRK_ENGINEFAIL	284953	6
1	1	CBRK_FLIGHTTERM	121212	6
1	1	CBRK_GPSFAIL	0	6
1	1	CBRK_RATE_CTRL	0	6
1	1	CBRK_SUPPLY_CHK	0	6
1	1	CBRK_USB_CHK	0	6
1	1	CBRK_VELPOSERR	0	6
1	1	COM_ARM_AUTH	256010	6
1	1	COM_ARM_IMU_ACC	0.699999988079071045	9
1	1	COM_ARM_IMU_GYR	0.250000000000000000	9
1	1	COM_ARM_MAG	0.150000005960464478	9
1	1	COM_ARM_MIS_REQ	0	6
1	1	COM_ARM_SWISBTN	0	6
1	1	COM_ARM_WO_GPS	1	6
1	1	COM_ASPD_FS_ACT	0	6
1	1	COM_ASPD_FS_DLY	0	6
1	1	COM_ASPD_STALL	10.000000000000000000	9
1	1	COM_DISARM_LAND	0.100000001490116119	9
1	1	COM_DL_LOSS_T	10	6
1	1	COM_EF_C2T	5.000000000000000000	9
1	1	COM_EF_THROT	0.500000000000000000	9
1	1	COM_EF_TIME	10.000000000000000000	9
1	1	COM_FLIGHT_UUID	29	6
1	1	COM_FLTMODE1	-1	6
1	1	COM_FLTMODE2	-1	6
1	1	COM_FLTMODE3	-1	6
1	1	COM_FLTMODE4	-1	6
1	1	COM_FLTMODE5	-1	6
1	1	COM_FLTMODE6	-1	6
1	1	COM_HLDL_LOSS_T	120	6
1	1	COM_HLDL_REG_T	0	6
1	1	COM_HOME_H_T	5.000000000000000000	9
1	1	COM_HOME_V_T	10.000000000000000000	9
1	1	COM_LOW_BAT_ACT	0	6
1	1	COM_OA_BOOT_T	100	6
1	1	COM_OBL_ACT	2	6
1	1	COM_OBL_RC_ACT	0	6
1	1	COM_OBS_AVOID	0	6
1	1	COM_OF_LOSS_T	5.000000000000000000	9
1	1	COM_POSCTL_NAVL	0	6
1	1	COM_POS_FS_DELAY	1	6
1	1	COM_POS_FS_EPH	5.000000000000000000	9
1	1	COM_POS_FS_EPV	10.000000000000000000	9
1	1	COM_POS_FS_GAIN	10	6
1	1	COM_POS_FS_PROB	30	6
1	1	COM_RC_ARM_HYST	1000	6
1	1	COM_RC_IN_MODE	1	6
1	1	COM_RC_LOSS_T	0.500000000000000000	9
1	1	COM_RC_OVERRIDE	0	6
1	1	COM_RC_STICK_OV	12.000000000000000000	9
1	1	COM_TAKEOFF_ACT	0	6
1	1	COM_TAS_FS_INNOV	1.000000000000000000	9
1	1	COM_TAS_FS_INTEG	-1.000000000000000000	9
1	1	COM_TAS_FS_T1	3	6
1	1	COM_TAS_FS_T2	100	6
1	1	COM_VEL_FS_EVH	1.000000000000000000	9
1	1	EKF2_ABIAS_INIT	0.200000002980232239	9
1	1	EKF2_ABL_ACCLIM	25.000000000000000000	9
1	1	EKF2_ABL_GYRLIM	3.000000000000000000	9
1	1	EKF2_ABL_LIM	0.400000005960464478	9
1	1	EKF2_ABL_TAU	0.500000000000000000	9
1	1	EKF2_ACC_B_NOISE	0.003000000026077032	9
1	1	EKF2_ACC_NOISE	0.349999994039535522	9
1	1	EKF2_AID_MASK	1	6
1	1	EKF2_ANGERR_INIT	0.009999999776482582	9
1	1	EKF2_ARSP_THR	0.000000000000000000	9
1	1	EKF2_ASPD_MAX	20.000000000000000000	9
1	1	EKF2_ASP_DELAY	100.000000000000000000	9
1	1	EKF2_AVEL_DELAY	5.000000000000000000	9
1	1	EKF2_BARO_DELAY	0.000000000000000000	9
1	1	EKF2_BARO_GATE	5.000000000000000000	9
1	1	EKF2_BARO_NOISE	2.000000000000000000	9
1	1	EKF2_BCOEF_X	25.000000000000000000	9
1	1	EKF2_BCOEF_Y	25.000000000000000000	9
1	1	EKF2_BETA_GATE	5.000000000000000000	9
1	1	EKF2_BETA_NOISE	0.300000011920928955	9
1	1	EKF2_DECL_TYPE	7	6
1	1	EKF2_DRAG_NOISE	2.500000000000000000	9
1	1	EKF2_EAS_NOISE	1.399999976158142090	9
1	1	EKF2_EVA_NOISE	0.050000000745058060	9
1	1	EKF2_EVP_NOISE	0.050000000745058060	9
1	1	EKF2_EV_DELAY	175.000000000000000000	9
1	1	EKF2_EV_GATE	5.000000000000000000	9
1	1	EKF2_EV_POS_X	0.000000000000000000	9
1	1	EKF2_EV_POS_Y	0.000000000000000000	9
1	1	EKF2_EV_POS_Z	0.000000000000000000	9
1	1	EKF2_FUSE_BETA	0	6
1	1	EKF2_GBIAS_INIT	0.009999999776482582	9
1	1	EKF2_GND_EFF_DZ	0.000000000000000000	9
1	1	EKF2_GND_MAX_HGT	0.500000000000000000	9
1	1	EKF2_GPS_CHECK	245	6
1	1	EKF2_GPS_DELAY	110.000000000000000000	9
1	1	EKF2_GPS_MASK	0	6
1	1	EKF2_GPS_POS_X	0.000000000000000000	9
1	1	EKF2_GPS_POS_Y	0.000000000000000000	9
1	1	EKF2_GPS_POS_Z	0.000000000000000000	9
1	1	EKF2_GPS_P_GATE	5.000000000000000000	9
1	1	EKF2_GPS_P_NOISE	0.500000000000000000	9
1	1	EKF2_GPS_TAU	10.000000000000000000	9
1	1	EKF2_GPS_V_GATE	5.000000000000000000	9
1	1	EKF2_GPS_V_NOISE	0.500000000000000000	9
1	1	EKF2_GYR_B_NOISE	0.001000000047497451	9
1	1	EKF2_GYR_NOISE	0.014999999664723873	9
1	1	EKF2_HDG_GATE	2.599999904632568359	9
1	1	EKF2_HEAD_NOISE	0.300000011920928955	9
1	1	EKF2_HGT_MODE	0	6
1	1	EKF2_IMU_POS_X	0.000000000000000000	9
1	1	EKF2_IMU_POS_Y	0.000000000000000000	9
1	1	EKF2_IMU_POS_Z	0.000000000000000000	9
1	1	EKF2_MAGBIAS_ID	196616	6
1	1	EKF2_MAGBIAS_X	-0.000333498173858970	9
1	1	EKF2_MAGBIAS_Y	-0.000218216911889613	9
1	1	EKF2_MAGBIAS_Z	-0.000062738770793658	9
1	1	EKF2_MAGB_K	0.200000002980232239	9
1	1	EKF2_MAGB_VREF	0.000000249999999369	9
1	1	EKF2_MAG_ACCLIM	0.500000000000000000	9
1	1	EKF2_MAG_B_NOISE	0.000099999997473788	9
1	1	EKF2_MAG_DECL	-24.000000000000000000	9
1	1	EKF2_MAG_DELAY	0.000000000000000000	9
1	1	EKF2_MAG_E_NOISE	0.001000000047497451	9
1	1	EKF2_MAG_GATE	3.000000000000000000	9
1	1	EKF2_MAG_NOISE	0.050000000745058060	9
1	1	EKF2_MAG_TYPE	0	6
1	1	EKF2_MAG_YAWLIM	0.250000000000000000	9
1	1	EKF2_MIN_OBS_DT	20	6
1	1	EKF2_MIN_RNG	0.100000001490116119	9
1	1	EKF2_MOVE_TEST	1.000000000000000000	9
1	1	EKF2_NOAID_NOISE	10.000000000000000000	9
1	1	EKF2_NOAID_TOUT	5000000	6
1	1	EKF2_OF_DELAY	5.000000000000000000	9
1	1	EKF2_OF_GATE	3.000000000000000000	9
1	1	EKF2_OF_N_MAX	0.500000000000000000	9
1	1	EKF2_OF_N_MIN	0.150000005960464478	9
1	1	EKF2_OF_POS_X	0.000000000000000000	9
1	1	EKF2_OF_POS_Y	0.000000000000000000	9
1	1	EKF2_OF_POS_Z	0.000000000000000000	9
1	1	EKF2_OF_QMIN	1	6
1	1	EKF2_PCOEF_XN	0.000000000000000000	9
1	1	EKF2_PCOEF_XP	0.000000000000000000	9
1	1	EKF2_PCOEF_YN	0.000000000000000000	9
1	1	EKF2_PCOEF_YP	0.000000000000000000	9
1	1	EKF2_PCOEF_Z	0.000000000000000000	9
1	1	EKF2_REQ_EPH	3.000000000000000000	9
1	1	EKF2_REQ_EPV	5.000000000000000000	9
1	1	EKF2_REQ_GDOP	2.500000000000000000	9
1	1	EKF2_REQ_HDRIFT	0.100000001490116119	9
1	1	EKF2_REQ_NSATS	6	6
1	1	EKF2_REQ_SACC	0.500000000000000000	9
1	1	EKF2_REQ_VDRIFT	0.200000002980232239	9
1	1	EKF2_RNG_AID	0	6
1	1	EKF2_RNG_A_HMAX	5.000000000000000000	9
1	1	EKF2_RNG_A_IGATE	1.000000000000000000	9
1	1	EKF2_RNG_A_VMAX	1.000000000000000000	9
1	1	EKF2_RNG_DELAY	5.000000000000000000	9
1	1	EKF2_RNG_GATE	5.000000000000000000	9
1	1	EKF2_RNG_NOISE	0.100000001490116119	9
1	1	EKF2_RNG_PITCH	0.000000000000000000	9
1	1	EKF2_RNG_POS_X	0.000000000000000000	9
1	1	EKF2_RNG_POS_Y	0.000000000000000000	9
1	1	EKF2_RNG_POS_Z	0.000000000000000000	9
1	1	EKF2_RNG_SFE	0.050000000745058060	9
1	1	EKF2_TAS_GATE	3.000000000000000000	9
1	1	EKF2_TAU_POS	0.250000000000000000	9
1	1	EKF2_TAU_VEL	0.250000000000000000	9
1	1	EKF2_TERR_GRAD	0.500000000000000000	9
1	1	EKF2_TERR_NOISE	5.000000000000000000	9
1	1	EKF2_WIND_NOISE	0.100000001490116119	9
1	1	FD_FAIL_P	60	6
1	1	FD_FAIL_R	60	6
1	1	GF_ACTION	1	6
1	1	GF_ALTMODE	0	6
1	1	GF_COUNT	-1	6
1	1	GF_MAX_HOR_DIST	0.000000000000000000	9
1	1	GF_MAX_VER_DIST	0.000000000000000000	9
1	1	GF_SOURCE	0	6
1	1	LNDMC_ALT_MAX	-1.000000000000000000	9
1	1	LNDMC_FFALL_THR	2.000000000000000000	9
1	1	LNDMC_FFALL_TTRI	0.300000011920928955	9
1	1	LNDMC_LOW_T_THR	0.300000011920928955	9
1	1	LNDMC_ROT_MAX	20.000000000000000000	9
1	1	LNDMC_XY_VEL_MAX	1.500000000000000000	9
1	1	LNDMC_Z_VEL_MAX	0.500000000000000000	9
1	1	LND_FLIGHT_T_HI	0	6
1	1	LND_FLIGHT_T_LO	-448403296	6
1	1	MAV_BROADCAST	0	6
1	1	MAV_COMP_ID	1	6
1	1	MAV_FWDEXTSP	1	6
1	1	MAV_HASH_CHK_EN	1	6
1	1	MAV_HB_FORW_EN	1	6
1	1	MAV_ODOM_LP	0	6
1	1	MAV_PROTO_VER	2	6
1	1	MAV_RADIO_ID	0	6
1	1	MAV_SYS_ID	1	6
1	1	MAV_TYPE	13	6
1	1	MAV_USEHILGPS	0	6
1	1	MC_ACRO_EXPO	0.689999997615814209	9
1	1	MC_ACRO_EXPO_Y	0.689999997615814209	9
1	1	MC_ACRO_P_MAX	720.000000000000000000	9
1	1	MC_ACRO_R_MAX	720.000000000000000000	9
1	1	MC_ACRO_SUPEXPO	0.699999988079071045	9
1	1	MC_ACRO_SUPEXPOY	0.699999988079071045	9
1	1	MC_ACRO_Y_MAX	540.000000000000000000	9
1	1	MC_AIRMODE	0	6
1	1	MC_BAT_SCALE_EN	0	6
1	1	MC_DTERM_CUTOFF	0.000000000000000000	9
1	1	MC_PITCHRATE_D	0.003000000026077032	9
1	1	MC_PITCHRATE_FF	0.000000000000000000	9
1	1	MC_PITCHRATE_I	0.200000002980232239	9
1	1	MC_PITCHRATE_MAX	220.000000000000000000	9
1	1	MC_PITCHRATE_P	0.100000001490116119	9
1	1	MC_PITCH_P	6.000000000000000000	9
1	1	MC_PR_INT_LIM	0.300000011920928955	9
1	1	MC_RATT_TH	0.800000011920928955	9
1	1	MC_ROLLRATE_D	0.003000000026077032	9
1	1	MC_ROLLRATE_FF	0.000000000000000000	9
1	1	MC_ROLLRATE_I	0.200000002980232239	9
1	1	MC_ROLLRATE_MAX	220.000000000000000000	9
1	1	MC_ROLLRATE_P	0.050000000745058060	9
1	1	MC_ROLL_P	6.000000000000000000	9
1	1	MC_RR_INT_LIM	0.300000011920928955	9
1	1	MC_TPA_BREAK_D	1.000000000000000000	9
1	1	MC_TPA_BREAK_I	1.000000000000000000	9
1	1	MC_TPA_BREAK_P	1.000000000000000000	9
1	1	MC_TPA_RATE_D	0.000000000000000000	9
1	1	MC_TPA_RATE_I	0.000000000000000000	9
1	1	MC_TPA_RATE_P	0.000000000000000000	9
1	1	MC_YAWRATE_D	0.000000000000000000	9
1	1	MC_YAWRATE_FF	0.000000000000000000	9
1	1	MC_YAWRATE_I	0.100000001490116119	9
1	1	MC_YAWRATE_MAX	200.000000000000000000	9
1	1	MC_YAWRATE_P	0.200000002980232239	9
1	1	MC_YAW_P	2.799999952316284180	9
1	1	MC_YR_INT_LIM	0.300000011920928955	9
1	1	MIS_ALTMODE	1	6
1	1	MIS_DIST_1WP	900.000000000000000000	9
1	1	MIS_DIST_WPS	900.000000000000000000	9
1	1	MIS_LTRMIN_ALT	-1.000000000000000000	9
1	1	MIS_MNT_YAW_CTL	0	6
1	1	MIS_TAKEOFF_ALT	2.500000000000000000	9
1	1	MIS_TAKEOFF_REQ	0	6
1	1	MIS_YAW_ERR	12.000000000000000000	9
1	1	MIS_YAW_TMT	-1.000000000000000000	9
1	1	MNT_DO_STAB	0	6
1	1	MNT_MAN_PITCH	0	6
1	1	MNT_MAN_ROLL	0	6
1	1	MNT_MAN_YAW	0	6
1	1	MNT_MAV_COMPID	154	6
1	1	MNT_MAV_SYSID	1	6
1	1	MNT_MODE_IN	0	6
1	1	MNT_MODE_OUT	0	6
1	1	MNT_OB_LOCK_MODE	0.000000000000000000	9
1	1	MNT_OB_NORM_MODE	-1.000000000000000000	9
1	1	MNT_OFF_PITCH	0.000000000000000000	9
1	1	MNT_OFF_ROLL	0.000000000000000000	9
1	1	MNT_OFF_YAW	0.000000000000000000	9
1	1	MNT_RANGE_PITCH	360.000000000000000000	9
1	1	MNT_RANGE_ROLL	360.000000000000000000	9
1	1	MNT_RANGE_YAW	360.000000000000000000	9
1	1	MPC_ACC_DOWN_MAX	10.000000000000000000	9
1	1	MPC_ACC_HOR	5.000000000000000000	9
1	1	MPC_ACC_HOR_ESTM	0.500000000000000000	9
1	1	MPC_ACC_HOR_MAX	3.000000000000000000	9
1	1	MPC_ACC_UP_MAX	10.000000000000000000	9
1	1	MPC_ALT_MODE	0	6
1	1	MPC_AUTO_MODE	1	6
1	1	MPC_COL_PREV_D	-1.000000000000000000	9
1	1	MPC_CRUISE_90	2.500000000000000000	9
1	1	MPC_DEC_HOR_SLOW	5.000000000000000000	9
1	1	MPC_HOLD_DZ	0.100000001490116119	9
1	1	MPC_HOLD_MAX_XY	0.800000011920928955	9
1	1	MPC_HOLD_MAX_Z	2.000000000000000000	9
1	1	MPC_JERK_AUTO	8.000000000000000000	9
1	1	MPC_JERK_MAX	20.000000000000000000	9
1	1	MPC_JERK_MIN	10.000000000000000000	9
1	1	MPC_LAND_ALT1	10.000000000000000000	9
1	1	MPC_LAND_ALT2	5.000000000000000000	9
1	1	MPC_LAND_SPEED	0.699999988079071045	9
1	1	MPC_MANTHR_MIN	0.079999998211860657	9
1	1	MPC_MAN_TILT_MAX	35.000000000000000000	9
1	1	MPC_MAN_Y_MAX	200.000000000000000000	9
1	1	MPC_POS_MODE	1	6
1	1	MPC_SPOOLUP_TIME	1.000000000000000000	9
1	1	MPC_THR_CURVE	0	6
1	1	MPC_THR_HOVER	0.500000000000000000	9
1	1	MPC_THR_MAX	1.000000000000000000	9
1	1	MPC_THR_MIN	0.119999997317790985	9
1	1	MPC_TILTMAX_AIR	45.000000000000000000	9
1	1	MPC_TILTMAX_LND	12.000000000000000000	9
1	1	MPC_TKO_RAMP_T	3.000000000000000000	9
1	1	MPC_TKO_SPEED	1.500000000000000000	9
1	1	MPC_VELD_LP	5.000000000000000000	9
1	1	MPC_VEL_MANUAL	10.000000000000000000	9
1	1	MPC_XY_CRUISE	3.000000000000000000	9
1	1	MPC_XY_MAN_EXPO	0.000000000000000000	9
1	1	MPC_XY_P	0.800000011920928955	9
1	1	MPC_XY_TRAJ_P	0.300000011920928955	9
1	1	MPC_XY_VEL_D	0.016000000759959221	9
1	1	MPC_XY_VEL_I	0.200000002980232239	9
1	1	MPC_XY_VEL_MAX	12.000000000000000000	9
1	1	MPC_XY_VEL_P	0.150000005960464478	9
1	1	MPC_YAWRAUTO_MAX	45.000000000000000000	9
1	1	MPC_YAW_EXPO	0.000000000000000000	9
1	1	MPC_YAW_MODE	0	6
1	1	MPC_Z_MAN_EXPO	0.000000000000000000	9
1	1	MPC_Z_P	1.000000000000000000	9
1	1	MPC_Z_TRAJ_P	0.300000011920928955	9
1	1	MPC_Z_VEL_D	0.000000000000000000	9
1	1	MPC_Z_VEL_I	0.150000005960464478	9
1	1	MPC_Z_VEL_MAX_DN	1.000000000000000000	9
1	1	MPC_Z_VEL_MAX_UP	1.000000000000000000	9
1	1	MPC_Z_VEL_P	0.600000023841857910	9
1	1	NAV_ACC_RAD	2.000000000000000000	9
1	1	NAV_AH_ALT	600.000000000000000000	9
1	1	NAV_AH_LAT	-265847810	6
1	1	NAV_AH_LON	1518423250	6
1	1	NAV_DLL_ACT	2	6
1	1	NAV_DLL_AH_T	120.000000000000000000	9
1	1	NAV_DLL_CHSK	0	6
1	1	NAV_DLL_CH_ALT	600.000000000000000000	9
1	1	NAV_DLL_CH_LAT	-266072120	6
1	1	NAV_DLL_CH_LON	1518453890	6
1	1	NAV_DLL_CH_T	120.000000000000000000	9
1	1	NAV_DLL_N	2	6
1	1	NAV_FORCE_VT	1	6
1	1	NAV_FT_DST	8.000000000000000000	9
1	1	NAV_FT_FS	1	6
1	1	NAV_FT_RS	0.500000000000000000	9
1	1	NAV_FW_ALTL_RAD	5.000000000000000000	9
1	1	NAV_FW_ALT_RAD	10.000000000000000000	9
1	1	NAV_GPSF_LT	0.000000000000000000	9
1	1	NAV_GPSF_P	0.000000000000000000	9
1	1	NAV_GPSF_R	15.000000000000000000	9
1	1	NAV_GPSF_TR	0.000000000000000000	9
1	1	NAV_LOITER_RAD	50.000000000000000000	9
1	1	NAV_MC_ALT_RAD	0.800000011920928955	9
1	1	NAV_MIN_FT_HT	8.000000000000000000	9
1	1	NAV_RCL_ACT	2	6
1	1	NAV_RCL_LT	120.000000000000000000	9
1	1	NAV_TRAFF_AVOID	1	6
1	1	PLD_BTOUT	5.000000000000000000	9
1	1	PLD_FAPPR_ALT	0.100000001490116119	9
1	1	PLD_HACC_RAD	0.200000002980232239	9
1	1	PLD_MAX_SRCH	3	6
1	1	PLD_SRCH_ALT	10.000000000000000000	9
1	1	PLD_SRCH_TOUT	10.000000000000000000	9
1	1	RC10_DZ	0.000000000000000000	9
1	1	RC10_MAX	2000.000000000000000000	9
1	1	RC10_MIN	1000.000000000000000000	9
1	1	RC10_REV	1.000000000000000000	9
1	1	RC10_TRIM	1500.000000000000000000	9
1	1	RC11_DZ	0.000000000000000000	9
1	1	RC11_MAX	2000.000000000000000000	9
1	1	RC11_MIN	1000.000000000000000000	9
1	1	RC11_REV	1.000000000000000000	9
1	1	RC11_TRIM	1500.000000000000000000	9
1	1	RC12_DZ	0.000000000000000000	9
1	1	RC12_MAX	2000.000000000000000000	9
1	1	RC12_MIN	1000.000000000000000000	9
1	1	RC12_REV	1.000000000000000000	9
1	1	RC12_TRIM	1500.000000000000000000	9
1	1	RC13_DZ	0.000000000000000000	9
1	1	RC13_MAX	2000.000000000000000000	9
1	1	RC13_MIN	1000.000000000000000000	9
1	1	RC13_REV	1.000000000000000000	9
1	1	RC13_TRIM	1500.000000000000000000	9
1	1	RC14_DZ	0.000000000000000000	9
1	1	RC14_MAX	2000.000000000000000000	9
1	1	RC14_MIN	1000.000000000000000000	9
1	1	RC14_REV	1.000000000000000000	9
1	1	RC14_TRIM	1500.000000000000000000	9
1	1	RC15_DZ	0.000000000000000000	9
1	1	RC15_MAX	2000.000000000000000000	9
1	1	RC15_MIN	1000.000000000000000000	9
1	1	RC15_REV	1.000000000000000000	9
1	1	RC15_TRIM	1500.000000000000000000	9
1	1	RC16_DZ	0.000000000000000000	9
1	1	RC16_MAX	2000.000000000000000000	9
1	1	RC16_MIN	1000.000000000000000000	9
1	1	RC16_REV	1.000000000000000000	9
1	1	RC16_TRIM	1500.000000000000000000	9
1	1	RC17_DZ	0.000000000000000000	9
1	1	RC17_MAX	2000.000000000000000000	9
1	1	RC17_MIN	1000.000000000000000000	9
1	1	RC17_REV	1.000000000000000000	9
1	1	RC17_TRIM	1500.000000000000000000	9
1	1	RC18_DZ	0.000000000000000000	9
1	1	RC18_MAX	2000.000000000000000000	9
1	1	RC18_MIN	1000.000000000000000000	9
1	1	RC18_REV	1.000000000000000000	9
1	1	RC18_TRIM	1500.000000000000000000	9
1	1	RC1_DZ	10.000000000000000000	9
1	1	RC1_MAX	2000.000000000000000000	9
1	1	RC1_MIN	1000.000000000000000000	9
1	1	RC1_REV	1.000000000000000000	9
1	1	RC1_TRIM	1500.000000000000000000	9
1	1	RC2_DZ	10.000000000000000000	9
1	1	RC2_MAX	2000.000000000000000000	9
1	1	RC2_MIN	1000.000000000000000000	9
1	1	RC2_REV	1.000000000000000000	9
1	1	RC2_TRIM	1500.000000000000000000	9
1	1	RC3_DZ	10.000000000000000000	9
1	1	RC3_MAX	2000.000000000000000000	9
1	1	RC3_MIN	1000.000000000000000000	9
1	1	RC3_REV	1.000000000000000000	9
1	1	RC3_TRIM	1500.000000000000000000	9
1	1	RC4_DZ	10.000000000000000000	9
1	1	RC4_MAX	2000.000000000000000000	9
1	1	RC4_MIN	1000.000000000000000000	9
1	1	RC4_REV	1.000000000000000000	9
1	1	RC4_TRIM	1500.000000000000000000	9
1	1	RC5_DZ	10.000000000000000000	9
1	1	RC5_MAX	2000.000000000000000000	9
1	1	RC5_MIN	1000.000000000000000000	9
1	1	RC5_REV	1.000000000000000000	9
1	1	RC5_TRIM	1500.000000000000000000	9
1	1	RC6_DZ	10.000000000000000000	9
1	1	RC6_MAX	2000.000000000000000000	9
1	1	RC6_MIN	1000.000000000000000000	9
1	1	RC6_REV	1.000000000000000000	9
1	1	RC6_TRIM	1500.000000000000000000	9
1	1	RC7_DZ	10.000000000000000000	9
1	1	RC7_MAX	2000.000000000000000000	9
1	1	RC7_MIN	1000.000000000000000000	9
1	1	RC7_REV	1.000000000000000000	9
1	1	RC7_TRIM	1500.000000000000000000	9
1	1	RC8_DZ	10.000000000000000000	9
1	1	RC8_MAX	2000.000000000000000000	9
1	1	RC8_MIN	1000.000000000000000000	9
1	1	RC8_REV	1.000000000000000000	9
1	1	RC8_TRIM	1500.000000000000000000	9
1	1	RC9_DZ	0.000000000000000000	9
1	1	RC9_MAX	2000.000000000000000000	9
1	1	RC9_MIN	1000.000000000000000000	9
1	1	RC9_REV	1.000000000000000000	9
1	1	RC9_TRIM	1500.000000000000000000	9
1	1	RC_ACRO_TH	0.500000000000000000	9
1	1	RC_ARMSWITCH_TH	0.250000000000000000	9
1	1	RC_ASSIST_TH	0.250000000000000000	9
1	1	RC_AUTO_TH	0.750000000000000000	9
1	1	RC_CHAN_CNT	0	6
1	1	RC_FAILS_THR	0	6
1	1	RC_FLT_CUTOFF	10.000000000000000000	9
1	1	RC_FLT_SMP_RATE	50.000000000000000000	9
1	1	RC_GEAR_TH	0.250000000000000000	9
1	1	RC_KILLSWITCH_TH	0.250000000000000000	9
1	1	RC_LOITER_TH	0.500000000000000000	9
1	1	RC_MAN_TH	0.500000000000000000	9
1	1	RC_MAP_ACRO_SW	0	6
1	1	RC_MAP_ARM_SW	0	6
1	1	RC_MAP_AUX1	0	6
1	1	RC_MAP_AUX2	0	6
1	1	RC_MAP_AUX3	0	6
1	1	RC_MAP_AUX4	0	6
1	1	RC_MAP_AUX5	0	6
1	1	RC_MAP_AUX6	0	6
1	1	RC_MAP_FAILSAFE	0	6
1	1	RC_MAP_FLAPS	0	6
1	1	RC_MAP_FLTMODE	0	6
1	1	RC_MAP_GEAR_SW	0	6
1	1	RC_MAP_KILL_SW	0	6
1	1	RC_MAP_LOITER_SW	0	6
1	1	RC_MAP_MAN_SW	0	6
1	1	RC_MAP_MODE_SW	0	6
1	1	RC_MAP_OFFB_SW	0	6
1	1	RC_MAP_PARAM1	0	6
1	1	RC_MAP_PARAM2	0	6
1	1	RC_MAP_PARAM3	0	6
1	1	RC_MAP_PITCH	0	6
1	1	RC_MAP_POSCTL_SW	0	6
1	1	RC_MAP_RATT_SW	0	6
1	1	RC_MAP_RETURN_SW	0	6
1	1	RC_MAP_ROLL	0	6
1	1	RC_MAP_STAB_SW	0	6
1	1	RC_MAP_THROTTLE	0	6
1	1	RC_MAP_TRANS_SW	0	6
1	1	RC_MAP_YAW	0	6
1	1	RC_OFFB_TH	0.500000000000000000	9
1	1	RC_POSCTL_TH	0.500000000000000000	9
1	1	RC_RATT_TH	0.500000000000000000	9
1	1	RC_RETURN_TH	0.500000000000000000	9
1	1	RC_STAB_TH	0.500000000000000000	9
1	1	RC_TRANS_TH	0.250000000000000000	9
1	1	RTL_DESCEND_ALT	10.000000000000000000	9
1	1	RTL_LAND_DELAY	0.000000000000000000	9
1	1	RTL_MIN_DIST	5.000000000000000000	9
1	1	RTL_RETURN_ALT	30.000000000000000000	9
1	1	RTL_TYPE	0	6
1	1	SDLOG_DIRS_MAX	7	6
1	1	SDLOG_MISSION	0	6
1	1	SDLOG_MODE	1	6
1	1	SDLOG_PROFILE	131	6
1	1	SDLOG_UTC_OFFSET	0	6
1	1	SENS_BARO_QNH	1013.250000000000000000	9
1	1	SENS_BOARD_ROT	0	6
1	1	SENS_BOARD_X_OFF	0.000000999999997475	9
1	1	SENS_BOARD_Y_OFF	0.000000000000000000	9
1	1	SENS_BOARD_Z_OFF	0.000000000000000000	9
1	1	SENS_DPRES_OFF	0.001000000047497451	9
1	1	SENS_FLOW_MAXHGT	3.000000000000000000	9
1	1	SENS_FLOW_MAXR	2.500000000000000000	9
1	1	SENS_FLOW_MINHGT	0.699999988079071045	9
1	1	SENS_FLOW_ROT	6	6
1	1	SIM_BAT_DRAIN	60.000000000000000000	9
1	1	SYS_AUTOCONFIG	0	6
1	1	SYS_AUTOSTART	6011	6
1	1	SYS_CAL_TDEL	24	6
1	1	SYS_CAL_TMAX	10	6
1	1	SYS_CAL_TMIN	5	6
1	1	SYS_HAS_BARO	1	6
1	1	SYS_HAS_MAG	1	6
1	1	SYS_HITL	0	6
1	1	SYS_MC_EST_GROUP	2	6
1	1	SYS_PARAM_VER	1	6
1	1	SYS_RESTART_TYPE	2	6
1	1	TC_A_ENABLE	0	6
1	1	TC_B_ENABLE	0	6
1	1	TC_G_ENABLE	0	6
1	1	TRIG_ACT_TIME	40.000000000000000000	9
1	1	TRIG_DISTANCE	2.000000000000000000	9
1	1	TRIG_INTERFACE	3	6
1	1	TRIG_INTERVAL	40.000000000000000000	9
1	1	TRIG_MODE	4	6
1	1	VT_B_DEC_MSS	2.000000000000000000	9
1	1	VT_B_REV_DEL	0.000000000000000000	9
1	1	WEST_EN	0	6
############################################
<?xml version="1.0"?>
<package format="2">
  <name>plt_resources</name>
  <version>0.0.0</version>
  <description>The plt_resources package</description>

  <maintainer email="ubuntu@todo.todo">ubuntu</maintainer>

  <license>TODO</license>

  <buildtool_depend>catkin</buildtool_depend>

  <export>
  </export>

</package>
############################################
<launch>
  <arg name="date" default="" />
  <arg name="log_files" default="false"/>
  <arg name="topics" default="/uav/error /uav/line /plt_cv/lines /mavros/global_position/local /mavros/state" />
  
  <!-- OPTIONS: median blur gaussian bilateral -->
  <arg name="kernel" default="3"/>
  <arg name="filter" default="blur"/>

  <!-- OPTIONS: sobel canny laplacian -->
  <arg name="edge" default="sobel"/>

  <arg name="line" default="houghlines"/>
  <arg name="houghThreshold" default="150"/>

  <arg name="use_rosbag" default="false"/>
  <!-- You should have a bagfile with images captured by the vant typhoon or a stream of the camera-->
  <arg name="bagfile" default="missionZ16m"/>
  <arg name="option" default=""/>

  <!-- Image processing node -->
  <include file="$(find plt_cv)/launch/img_preprocessing.launch">
    <arg name="filter" value="$(arg filter)"/>
    <arg name="kernel" value="$(arg kernel)"/>
    <arg name="edge" value="$(arg edge)"/>
    <arg name="line" value="$(arg line)"/>
    <arg name="houghThreshold" value="$(arg houghThreshold)"/>
  </include>

  <!-- Line tracking node -->
  <include file="$(find plt_cv)/launch/line_tracking.launch"/>


  <!-- Rosbag playback node -->
  <!-- Play Bagfile -->
  <group if="$(arg use_rosbag)">
    <include file="$(find plt_resources)/launch/rosbag_play.launch">
      <arg name="bagfile" value="$(arg bagfile)"/>
      <arg name="option" value="$(arg option)"/>
    </include>
  </group>

  <!-- Rosbag record topics node -->
  <group if="$(arg log_files)">
    <include file="$(find plt_resources)/launch/record_log.launch">
      <arg name="date" value="$(arg date)"/>
      <arg name="bagfile" value="$(arg bagfile)"/>
      <arg name="edge" value="$(arg edge)"/>
      <arg name="filter" value="$(arg filter)"/>
      <arg name="topics" value="$(arg topics)"/>
    </include>
  </group>

</launch>
############################################
<launch>
    <node
        pkg="rosbag"
        type="record"
        name="rosbag_record_cam"
        args="record -o $(find plt_resources)/bagfiles/mission
            /cgo3_camera/image_raw
            /mavros/state
            /mavros/global_position/local"
    />
</launch>
############################################
<launch>
    <node name="plt_graphs"
        pkg="rqt_plot"
        type="rqt_plot"
        args="/uav/error/distance
              /uav/error/theta"
    />
</launch>
############################################
cmake_minimum_required(VERSION 2.8.3)
project(plt_scripts)

find_package(catkin REQUIRED)

catkin_package()

include_directories()
############################################
<?xml version="1.0"?>
<package format="2">
  <name>plt_scripts</name>
  <version>0.0.0</version>
  <description>The plt_scripts package</description>

  <maintainer email="ubuntu@todo.todo">ubuntu</maintainer>

  <license>TODO</license>

  <buildtool_depend>catkin</buildtool_depend>

  <export>
  </export>
</package>
############################################
#WANDER 25/11/23
#LUCIANO 25/11/23
# Action Identification and Store (AIS)

from pymavlink import mavutil
import time

# Funções anteriores: create_connection, arm_drone, takeoff_drone, etc.

# Função para criar uma conexão MAVLink
def create_connection(connection_string):
    master = mavutil.mavlink_connection(connection_string, baud=57600)
    master.wait_heartbeat()
    return master

# Conectar ao drone
ip_address1 = 'tcp:127.0.0.1:14550' # Exemplo de endereço de conexão
ip_address2 = 'tcp:127.0.0.1:14551' # Exemplo de endereço de conexão
drone1 = create_connection(ip_address1) 
drone2 = create_connection(ip_address2) 

# Função para ler e processar mensagens de telemetria
def read_telemetry_data(master):
    while True:
        try:
            # Ler uma mensagem
            msg = master.recv_match(blocking=True)
            if msg is not None:
                # Processar mensagens de posição
                if msg.get_type() == 'GLOBAL_POSITION_INT':
                    latitude = msg.lat / 1e7
                    longitude = msg.lon / 1e7
                    altitude = msg.alt / 1000.0
                    print(f"Latitude: {latitude}, Longitude: {longitude}, Altitude: {altitude}")

                # Processar mensagens de atitude
                elif msg.get_type() == 'ATTITUDE':
                    pitch = math.degrees(msg.pitch)
                    roll = math.degrees(msg.roll)
                    yaw = math.degrees(msg.yaw)
                    print(f"Pitch: {pitch}, Roll: {roll}, Yaw: {yaw}")

                # Adicionar aqui processamento para outras mensagens conforme necessário

        except KeyboardInterrupt:
            break

# Iniciar a leitura de dados de telemetria
read_telemetry_data(drone1)
read_telemetry_data(drone2)
############################################
#WANDER 25/11/23
#LUCIANO 25/11/23
#RPA swarm - Reynolds Roles

import pygame
import random
import math
import cv2
import numpy as np

# Inicialização do Pygame
pygame.init()

# Tamanho da tela
LARGURA = 1366
ALTURA = 768

# Inicialização da tela
tela = pygame.display.set_mode((LARGURA, ALTURA))
pygame.display.set_caption("Boids com Rastro e Vídeo")

# Parâmetros dos boids
NUM_BOIDS = 2 #50 (up and side drones)
BOID_RADIUS = 5
BOID_SPEED = 2
BOID_RADIUS_COHESION = 100
BOID_RADIUS_ALIGNMENT = 50
BOID_RADIUS_SEPARATION = 20

# Cores
PRETO = (0, 0, 0)
BRANCO = (255, 255, 255)
VERMELHO = (255, 0, 0)

# Função para criar um boid
def criar_boid():
    x = random.randint(0, LARGURA)
    y = random.randint(0, ALTURA)
    angulo = random.uniform(0, 2 * math.pi)
    return [(x, y), angulo]

# Função para mover um boid
def mover_boid(boid):
    x, y = boid[0]
    angulo = boid[1]
    x += BOID_SPEED * math.cos(angulo)
    y += BOID_SPEED * math.sin(angulo)
    boid[0] = (x % LARGURA, y % ALTURA)

# Função para desenhar um boid
def desenhar_boid(tela, boid):
    x, y = boid[0]
    pygame.draw.circle(tela, VERMELHO, (int(x), int(y)), BOID_RADIUS)

# Carregar vídeo
# cap = cv2.VideoCapture('seu_video.mov')
cap = cv2.VideoCapture('SIM_UP.MOV')

# Loop principal
rodando = True
boids = [criar_boid() for _ in range(NUM_BOIDS)]
superficie_rastro = pygame.Surface((LARGURA, ALTURA), pygame.SRCALPHA)

while rodando:
    # Verificar eventos
    for evento in pygame.event.get():
        if evento.type == pygame.QUIT:
            rodando = False

    # Ler frame do vídeo
    ret, frame = cap.read()
    if not ret:
        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
        continue
    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    frame = cv2.resize(frame, (LARGURA, ALTURA), interpolation=cv2.INTER_AREA)
    frame = np.rot90(frame)
    frame = pygame.surfarray.make_surface(frame)
    tela.blit(frame, (0, 0))
    
    # Atualizar boids
    for boid in boids:
        pos_antiga = boid[0]
        mover_boid(boid)
        pos_nova = boid[0]
        pygame.draw.line(superficie_rastro, VERMELHO, pos_antiga, pos_nova, 2)

    # Desenhar rastro
    tela.blit(superficie_rastro, (0, 0))
    
    # Desenhar boids
    for boid in boids:
        desenhar_boid(tela, boid)

    # Atualizar tela
    pygame.display.flip()

# Finalização
pygame.quit()
cap.release()
############################################
#WANDER 25/11/23
#LUCIANO 25/11/23
#Buffer Control

from pymavlink import mavutil
import time
import math

# Funções anteriores: create_connection, arm_drone, takeoff_drone, apply_boids_rules

# Função para enviar comandos de movimento ao drone
def send_movement_command(master, vx, vy, vz):
    master.mav.set_position_target_local_ned_send(
        0, # time_boot_ms (unused)
        master.target_system, master.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED, # frame
        0b0000111111000111, # type_mask (only positions enabled)
        0, 0, 0, # x, y, z positions (not used)
        vx, vy, vz, # x, y, z velocity in m/s
        0, 0, 0, # x, y, z acceleration (not used)
        0, 0) # yaw, yaw_rate (not used)

# Função para atualizar a posição do drone com base no vetor de movimento
def update_drone_position(master, move_vector):
    vx, vy = move_vector
    vz = 0 # Mantém a mesma altitude por simplicidade
    send_movement_command(master, vx, vy, vz)

# Código para conectar aos drones, armar e decolar...

# Exemplo de loop principal
while True:
    # Obter as posições e velocidades atuais dos drones
    # Para este exemplo, vamos usar posições e velocidades fictícias
    # getPositionX = 10
    # getPositionY = 10
    drones_positions = [[0, 0], [getPositionX(), getPositionY()]] 
    my_position = [5, 5] # Posição do drone atual
    my_velocity = [1, 1] # Velocidade do drone atual

    # Aplicar as regras de boids
    move_vector = apply_boids_rules(drone1, drones_positions, my_position, my_velocity, 5) # Max velocity = 5 m/s

    # Atualizar a posição do drone
    update_drone_position(drone1, move_vector)

    # Pausa entre comandos
    time.sleep(1)
############################################
#WANDER 25/11/23
#LUCIANO 25/11/23
#Main Control

from pymavlink import mavutil
import time
import math

# Funções anteriores: create_connection, arm_drone, takeoff_drone

# Função para calcular a distância entre dois drones
def distance(drone1_pos, drone2_pos):
    return math.sqrt((drone1_pos[0] - drone2_pos[0])**2 + (drone1_pos[1] - drone2_pos[1])**2)

# Função para aplicar as regras de enxame
def apply_boids_rules(master, drones_positions, my_position, my_velocity, max_velocity):
    # Parâmetros para as regras
    desired_separation = 10.0 # Distância mínima entre drones
    neighbor_radius = 20.0 # Raio para considerar vizinhos

    # Inicializar vetores de movimento para cada regra
    separation_vector = [0, 0]
    alignment_vector = [0, 0]
    cohesion_vector = [0, 0]

    # Contar os vizinhos próximos
    num_neighbors = 0

    for drone_pos in drones_positions:
        dist = distance(my_position, drone_pos)

        # Separação
        if 0 < dist < desired_separation:
            separation_vector[0] += my_position[0] - drone_pos[0]
            separation_vector[1] += my_position[1] - drone_pos[1]

        # Alinhamento e coesão
        if 0 < dist < neighbor_radius:
            # Alinhamento
            alignment_vector[0] += my_velocity[0]
            alignment_vector[1] += my_velocity[1]

            # Coesão
            cohesion_vector[0] += drone_pos[0]
            cohesion_vector[1] += drone_pos[1]

            num_neighbors += 1

    if num_neighbors > 0:
        # Calcular a média para alinhamento e coesão
        alignment_vector[0] /= num_neighbors
        alignment_vector[1] /= num_neighbors
        alignment_vector = [alignment_vector[0] - my_velocity[0], alignment_vector[1] - my_velocity[1]]

        cohesion_vector[0] /= num_neighbors
        cohesion_vector[1] /= num_neighbors
        cohesion_vector = [cohesion_vector[0] - my_position[0], cohesion_vector[1] - my_position[1]]

    # Normalizar e aplicar uma constante de peso para cada vetor
    separation_weight = 1.5
    alignment_weight = 1.0
    cohesion_weight = 1.0

    # Calcular o vetor de movimento final
    move_vector = [
        separation_weight * separation_vector[0] + alignment_weight * alignment_vector[0] + cohesion_weight * cohesion_vector[0],
        separation_weight * separation_vector[1] + alignment_weight * alignment_vector[1] + cohesion_weight * cohesion_vector[1]
    ]

    # Limitar a velocidade máxima
    norm = math.sqrt(move_vector[0]**2 + move_vector[1]**2)
    if norm > max_velocity:
        move_vector[0] = (move_vector[0] / norm) * max_velocity
        move_vector[1] = (move_vector[1] / norm) * max_velocity

    return move_vector

# Função para atualizar a posição do drone com base no vetor de movimento
def update_drone_position(master, move_vector):
    # Aqui você deverá implementar a lógica para atualizar a posição do drone
    # com base no vetor de movimento. Isso pode envolver o envio de comandos MAVLink
    # específicos para ajustar a posição do
############################################
#!/bin/bash

sudo killall rosmaster
sudo killall gzserver
sudo killall gzclient
############################################
# Steps to setup the sitl

## Install setup

Install setup from [px4 dev guide](https://dev.px4.io/en/setup/getting_started.html)

### Install a GCS (Ground Control Station)

* Download QGroundControl from [here](https://docs.qgroundcontrol.com/en/releases/daily_builds.html)

### First build

```shell
cd <FW_PATH>
make px4_sitl_default gazebo
```

Where <FW_PATH> is the path to the Firmware folder from PX4 cloned git.

It will build the project and launch the px4 flight stack, gazebo simulator and the quadrotor iris.
Launch the QGroundControl and you can send commands and missions to the quadcopter.

## Use PX4 with Gazebo and ROS

### Sending sensor data from Gazebo to Ros topics

In order to have the sensors being published in ROS topics is necessary to update some paths

Add theses lines to your .bashrc file. It is located at your home folder.

```shell
source Tools/setup_gazebo.bash <FW_PATH>  <FW_PATH>/build/posix_sitl_default
export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:<FW_PATH>
export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:<FW_PATH>/Tools/sitl_gazebo
```

Where <FW_PATH> is the path to the Firmware folder from PX4 cloned git.

and then:

```shell
roslaunch px4 mavros_sitl.launch vehicle:=iris
```

Now it will also launch ros nodes. Look at the nodes and topics list.

## Use uav with gimbal and camera support

The uav Typhoon has support to gimbal and camera.

### First remove previous configurations from other vehicles

```shell
rm -r ~/.ros/eeprom
```

### Then build the code to launch the typhoon with correct parameters.

```shell
cd <FW_PATH>
make px4_sitl_default gazebo_typhoon_h480
```

### Kill the sitl and run with ROS using a ros launch file

```shell
roslaunch px4 mavros_sitl.launch vehicle:=typhoon_h480
```

### To publish the camera images in ros topics, uncomment this part of code in typhoon_h480.sdf and run again the previous command.

```xml
<plugin name="cgo3_camera_controller" filename="libgazebo_ros_camera.so">
    <alwaysOn>true</alwaysOn>
    <updateRate>0.0</updateRate>
    <cameraName>cgo3_camera</cameraName>
    <imageTopicName>image_raw</imageTopicName>
    <cameraInfoTopicName>camera_info</cameraInfoTopicName>
    <frameName>cgo3_camera_optical_frame</frameName>
    <hackBaseline>0.0</hackBaseline>
    <distortionK1>0.0</distortionK1>
    <distortionK2>0.0</distortionK2>
    <distortionK3>0.0</distortionK3>
    <distortionT1>0.0</distortionT1>
    <distortionT2>0.0</distortionT2>
</plugin>
```

### To see the images run this command in a new terminal:

```shell
rosrun image_view image_view image:=cgo3_camera/image_raw
```

## How to use this repository

Clone it in your machine.

It is a ROS workspace. So after downloading it, go to the root of the workspace
and compile the code, to generate the header files necessary to ROS, using
the catkin_make command:

```shell
cd <path>plt_ws
catkin_make
```

Now, you have two folders, build and devel.
Add the command to source this workspace, in order to ROS view this folder as a ROS package
system.

Add this line:

```shell
source <path>/plt_ws/devel/setup.bash
```

to the end of the .bashrc file. It is generally located at /home/user/

## To run the simulation

After completed the previous step, use the roslaunch command to start the Gazebo simulator
with the PX4 Sitl firmware.

```shell
roslaunch plt_gazebo simulation.launch
```

To start the image processing node, run the following command:

```shell
roslaunch plt_cv img_preprocessing.launch use_rosbag:=false
```

The use_rosbag parameter is used to launch or not the image processing step with the
images captured by ROS.
############################################

############################################
############################################