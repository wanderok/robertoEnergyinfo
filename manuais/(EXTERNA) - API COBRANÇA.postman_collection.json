{
	"info": {
		"_postman_id": "305845f3-5c9f-49ee-85e2-a2bfb91d66dc",
		"name": "(EXTERNA) - API COBRANÇA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28236622",
		"_collection_link": "https://universal-comet-220169.postman.co/workspace/Novo-Workspaces~32856c25-783c-4766-a984-a458f2ef3a4e/collection/28236622-305845f3-5c9f-49ee-85e2-a2bfb91d66dc?action=share&source=collection_link&creator=28236622"
	},
	"item": [
		{
			"name": "Pre-SetUp",
			"item": [
				{
					"name": "0. Load jsrsasign (executar apenas 1 vez)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"server_to_server_jsrsasign-js\", responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
							"protocol": "http",
							"host": [
								"kjur",
								"github",
								"io"
							],
							"path": [
								"jsrsasign",
								"jsrsasign-latest-all-min.js"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Config Parceiro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var server_to_server_aud = \"https://proxy.api.prebanco.com.br/auth/server/v1.1/token\";",
									"var server_to_server_auth_token = \"https://proxy.api.prebanco.com.br/auth/server/v1.1/token\";",
									"var server_to_server_access_token = \"\";",
									"var server_to_server_privateKey = \"\";",
									"",
									"pm.globals.set(\"server_to_server_aud\", server_to_server_aud);",
									"pm.globals.set(\"server_to_server_auth_token\", server_to_server_auth_token);",
									"pm.globals.set(\"server_to_server_access_token\", server_to_server_access_token);",
									"pm.globals.set(\"server_to_server_privateKey\", server_to_server_privateKey);",
									"console.log(\"cadastrado com sucesso\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Boleto",
			"item": [
				{
					"name": "REGISTRO DE BOLETO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**\r",
									"\r",
									"* Implementação do modelo Server-to-Server\r",
									"\r",
									"* @Author: bradesco-ob-squad-apinaoregulatoria@ciandt.com\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* INICIALIZANDO AS DEPENDENCIAS\r",
									"\r",
									"* Necessário ter as dependências abaixo: momentJS e jsrsasign\r",
									"\r",
									"*/\r",
									"\r",
									"var navigator = {}; //fake a navigator object for the lib\r",
									"\r",
									"var window = {}; //fake a window object for the lib\r",
									"\r",
									"eval(pm.globals.get(\"server_to_server_jsrsasign-js\")); //import javascript jsrsasign\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Carregando algumas variáveis relevantes para o processo\r",
									"\r",
									"* iat, exp e nonce. Além do timestamp para incluir nos headers\r",
									"\r",
									"*/\r",
									"\r",
									"// load values\r",
									"\r",
									"var now = new Date();\r",
									"\r",
									"var now1Hour = new Date();\r",
									"\r",
									"now1Hour.setHours(now.getHours() + 1);\r",
									"\r",
									"const BREAK_LINE = \"\\n\";\r",
									"\r",
									"const ALG_SHA256 = \"SHA256\";\r",
									"\r",
									"const ALG_SHA256_WITH_RSA = \"SHA256withRSA\";\r",
									"\r",
									"\r",
									"\r",
									"const iat = Math.floor(now.getTime() / 1000);\r",
									"\r",
									"const exp = Math.floor(now1Hour.getTime() / 1000);\r",
									"\r",
									"const nonce = now.getTime() + \"\";\r",
									"\r",
									"var momentTmp = moment(now).format((\"YYYY-MM-DDThh:mm:ssZ\"));\r",
									"\r",
									"// globals var\r",
									"\r",
									"const aud = pm.globals.get(\"server_to_server_aud\");\r",
									"\r",
									"const authTokenUrl = pm.globals.get(\"server_to_server_auth_token\");\r",
									"\r",
									"const accessToken = pm.globals.get(\"server_to_server_access_token\");\r",
									"\r",
									"const privateKey = pm.globals.get(\"server_to_server_privateKey\");\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi um texto referente aos dados do request\r",
									"\r",
									"* Este valor será assinado pela chave privada do requisitante posteriormente e incluido no header X-Brad-Signature\r",
									"\r",
									"*/\r",
									"\r",
									"function buildRequestText(authToken) {\r",
									"\r",
									"    var requestBody = (pm.request.body.raw) ? pm.request.body.raw : \"\";\r",
									"    var requestText = [pm.request.method, pm.request.url.getPath(), pm.request.url.getQueryString(),\r",
									"\r",
									"        requestBody, authToken, nonce, momentTmp, ALG_SHA256].join(BREAK_LINE);\r",
									"\r",
									"    return requestText;\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi a variavel Assertion\r",
									"\r",
									"* Este valor é utilizado durante na solicitação do token de acesso da API /auth/server/v1.1/token\r",
									"\r",
									"* Trata-se de um token JWT assinado com a chave privada de quem está realizando a requisição\r",
									"\r",
									"*/\r",
									"\r",
									"function buildAssertion() {\r",
									"    var header = {\r",
									"        \"alg\": \"RS256\",\r",
									"        \"typ\": \"JWT\"\r",
									"    };\r",
									"    var payload = {\r",
									"        \"aud\": aud,\r",
									"        \"sub\": accessToken,\r",
									"        \"iat\": iat,\r",
									"        \"exp\": exp,\r",
									"        \"jti\": nonce,\r",
									"        \"ver\": \"1.1\"\r",
									"    };\r",
									"\r",
									"    var sHeader = JSON.stringify(header);\r",
									"    var sPayload = JSON.stringify(payload);\r",
									"    var assertion = null;\r",
									"    if (privateKey) {\r",
									"        assertion = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, privateKey);\r",
									"    }\r",
									"    return assertion;\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Assina o texto referente aos dados do request\r",
									"\r",
									"*/\r",
									"\r",
									"function signRequestText(requestText) {\r",
									"\r",
									"    var kjursig = new KJUR.crypto.Signature({ \"alg\": ALG_SHA256_WITH_RSA });\r",
									"    kjursig.init(privateKey);\r",
									"    kjursig.updateString(requestText);\r",
									"    var hash = kjursig.sign();\r",
									"    return hextob64(hash);\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Request referente a API /auth/server/v1.1/token\r",
									"\r",
									"* É necessario inicialmente realizar uma autenticação do usuário, para em seguida, seguir com a realização da API que o requisitante deseja\r",
									"\r",
									"*/\r",
									"\r",
									"var requestTokenOptions = {\r",
									"    url: authTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"\r",
									"            { key: 'grant_type', value: 'urn:ietf:params:oauth:grant-type:jwt-bearer' },\r",
									"            { key: 'assertion', value: buildAssertion() },\r",
									"\r",
									"        ]\r",
									"\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"pm.sendRequest(requestTokenOptions, function (err, response) {\r",
									"\r",
									"    const jsonData = response.json();\r",
									"\r",
									"    var bearer = jsonData.token_type + \" \" + jsonData.access_token;\r",
									"    var authToken = jsonData.access_token;\r",
									"    var requestText = buildRequestText(authToken)\r",
									"    var signature = signRequestText(requestText);\r",
									"\r",
									"    // including headers\r",
									"\r",
									"    pm.variables.set('signature', signature);\r",
									"    pm.variables.set('nonce', nonce);\r",
									"    pm.variables.set('alg', \"SHA256\");\r",
									"    pm.variables.set('timestamp', momentTmp);\r",
									"    pm.variables.set('AuthBearer', bearer);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthBearer}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Algorithm",
								"value": "{{alg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "\"INSERIR CLIENT KEY\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"registraTitulo\":1,\"nuCPFCNPJ\":\"31759488\",\"filialCPFCNPJ\":\"0\",\"ctrlCPFCNPJ\":\"55\",\"cdTipoAcesso\":2,\"clubBanco\":0,\"prazoDecurso\":10,\"cdTipoContrato\":0,\"nuSequenciaContrato\":0,\"idProduto\":\"9\",\"nuNegociacao\":\"285600000000222652\",\"cdBanco\":237,\"nuSequenciaContrato2\":0,\"tpRegistro\":1,\"cdProduto\":1730,\"nuTitulo\":0,\"nuCliente\":\"WEBSERVICE\",\"dtEmissaoTitulo\":\"19.09.2024\",\"dtVencimentoTitulo\":\"20.12.2024\",\"tpVencimento\":0,\"vlNominalTitulo\":1500,\"cdEspecieTitulo\":1,\"tpProtestoAutomaticoNegativacao\":0,\"prazoProtestoAutomaticoNegativacao\":0,\"controleParticipante\":\"\",\"cdPagamentoParcial\":\"\",\"qtdePagamentoParcial\":0,\"percentualJuros\":0,\"vlJuros\":0,\"qtdeDiasJuros\":0,\"percentualMulta\":0,\"vlMulta\":0,\"qtdeDiasMulta\":0,\"percentualDesconto1\":0,\"vlDesconto1\":0,\"dataLimiteDesconto1\":\"\",\"percentualDesconto2\":0,\"vlDesconto2\":0,\"dataLimiteDesconto2\":\"\",\"percentualDesconto3\":0,\"vlDesconto3\":0,\"dataLimiteDesconto3\":\"\",\"prazoBonificacao\":0,\"percentualBonificacao\":0,\"vlBonificacao\":0,\"dtLimiteBonificacao\":\"\",\"vlAbatimento\":0,\"vlIOF\":0,\"nomePagador\":\"TESTEREGISTRO\",\"logradouroPagador\":\"AVENIDACOPACABANA\",\"nuLogradouroPagador\":\"237\",\"complementoLogradouroPagador\":\"3ANDAR\",\"cepPagador\":\"6472\",\"complementoCepPagador\":1,\"bairroPagador\":\"ALPHAVILLE\",\"municipioPagador\":\"BARUERI\",\"ufPagador\":\"SP\",\"cdIndCpfcnpjPagador\":1,\"nuCpfcnpjPagador\":35594132813,\"endEletronicoPagador\":\"\",\"nomeSacadorAvalista\":\"\",\"logradouroSacadorAvalista\":\"\",\"nuLogradouroSacadorAvalista\":\"\",\"complementoLogradouroSacadorAvalista\":\"\",\"cepSacadorAvalista\":0,\"complementoCepSacadorAvalista\":0,\"bairroSacadorAvalista\":\"\",\"municipioSacadorAvalista\":\"\",\"ufSacadorAvalista\":\"\",\"cdIndCpfcnpjSacadorAvalista\":0,\"nuCpfcnpjSacadorAvalista\":0,\"enderecoSacadorAvalista\":\"\"}"
						},
						"url": {
							"raw": "https://proxy.api.prebanco.com.br/v1/boleto/registrarBoleto",
							"protocol": "https",
							"host": [
								"proxy",
								"api",
								"prebanco",
								"com",
								"br"
							],
							"path": [
								"v1",
								"boleto",
								"registrarBoleto"
							]
						}
					},
					"response": []
				},
				{
					"name": "ALTERAR BOLETO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**\r",
									"\r",
									"* Implementação do modelo Server-to-Server\r",
									"\r",
									"* @Author: bradesco-ob-squad-apinaoregulatoria@ciandt.com\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* INICIALIZANDO AS DEPENDENCIAS\r",
									"\r",
									"* Necessário ter as dependências abaixo: momentJS e jsrsasign\r",
									"\r",
									"*/\r",
									"\r",
									"var navigator = {}; //fake a navigator object for the lib\r",
									"\r",
									"var window = {}; //fake a window object for the lib\r",
									"\r",
									"eval(pm.globals.get(\"server_to_server_jsrsasign-js\")); //import javascript jsrsasign\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Carregando algumas variáveis relevantes para o processo\r",
									"\r",
									"* iat, exp e nonce. Além do timestamp para incluir nos headers\r",
									"\r",
									"*/\r",
									"\r",
									"// load values\r",
									"\r",
									"var now = new Date();\r",
									"\r",
									"var now1Hour = new Date();\r",
									"\r",
									"now1Hour.setHours(now.getHours() + 1);\r",
									"\r",
									"const BREAK_LINE = \"\\n\";\r",
									"\r",
									"const ALG_SHA256 = \"SHA256\";\r",
									"\r",
									"const ALG_SHA256_WITH_RSA = \"SHA256withRSA\";\r",
									"\r",
									"\r",
									"\r",
									"const iat = Math.floor(now.getTime() / 1000);\r",
									"\r",
									"const exp = Math.floor(now1Hour.getTime() / 1000);\r",
									"\r",
									"const nonce = now.getTime() + \"\";\r",
									"\r",
									"var momentTmp = moment(now).format((\"YYYY-MM-DDThh:mm:ssZ\"));\r",
									"\r",
									"// globals var\r",
									"\r",
									"const aud = pm.globals.get(\"server_to_server_aud\");\r",
									"\r",
									"const authTokenUrl = pm.globals.get(\"server_to_server_auth_token\");\r",
									"\r",
									"const accessToken = pm.globals.get(\"server_to_server_access_token\");\r",
									"\r",
									"const privateKey = pm.globals.get(\"server_to_server_privateKey\");\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi um texto referente aos dados do request\r",
									"\r",
									"* Este valor será assinado pela chave privada do requisitante posteriormente e incluido no header X-Brad-Signature\r",
									"\r",
									"*/\r",
									"\r",
									"function buildRequestText(authToken) {\r",
									"\r",
									"    var requestBody = (pm.request.body.raw) ? pm.request.body.raw : \"\";\r",
									"    var requestText = [pm.request.method, pm.request.url.getPath(), pm.request.url.getQueryString(),\r",
									"\r",
									"        requestBody, authToken, nonce, momentTmp, ALG_SHA256].join(BREAK_LINE);\r",
									"\r",
									"    return requestText;\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi a variavel Assertion\r",
									"\r",
									"* Este valor é utilizado durante na solicitação do token de acesso da API /auth/server/v1.1/token\r",
									"\r",
									"* Trata-se de um token JWT assinado com a chave privada de quem está realizando a requisição\r",
									"\r",
									"*/\r",
									"\r",
									"function buildAssertion() {\r",
									"    var header = {\r",
									"        \"alg\": \"RS256\",\r",
									"        \"typ\": \"JWT\"\r",
									"    };\r",
									"    var payload = {\r",
									"        \"aud\": aud,\r",
									"        \"sub\": accessToken,\r",
									"        \"iat\": iat,\r",
									"        \"exp\": exp,\r",
									"        \"jti\": nonce,\r",
									"        \"ver\": \"1.1\"\r",
									"    };\r",
									"\r",
									"    var sHeader = JSON.stringify(header);\r",
									"    var sPayload = JSON.stringify(payload);\r",
									"    var assertion = null;\r",
									"    if (privateKey) {\r",
									"        assertion = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, privateKey);\r",
									"    }\r",
									"    return assertion;\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Assina o texto referente aos dados do request\r",
									"\r",
									"*/\r",
									"\r",
									"function signRequestText(requestText) {\r",
									"\r",
									"    var kjursig = new KJUR.crypto.Signature({ \"alg\": ALG_SHA256_WITH_RSA });\r",
									"    kjursig.init(privateKey);\r",
									"    kjursig.updateString(requestText);\r",
									"    var hash = kjursig.sign();\r",
									"    return hextob64(hash);\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Request referente a API /auth/server/v1.1/token\r",
									"\r",
									"* É necessario inicialmente realizar uma autenticação do usuário, para em seguida, seguir com a realização da API que o requisitante deseja\r",
									"\r",
									"*/\r",
									"\r",
									"var requestTokenOptions = {\r",
									"    url: authTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"\r",
									"            { key: 'grant_type', value: 'urn:ietf:params:oauth:grant-type:jwt-bearer' },\r",
									"            { key: 'assertion', value: buildAssertion() },\r",
									"\r",
									"        ]\r",
									"\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"pm.sendRequest(requestTokenOptions, function (err, response) {\r",
									"\r",
									"    const jsonData = response.json();\r",
									"\r",
									"    var bearer = jsonData.token_type + \" \" + jsonData.access_token;\r",
									"    var authToken = jsonData.access_token;\r",
									"    var requestText = buildRequestText(authToken)\r",
									"    var signature = signRequestText(requestText);\r",
									"\r",
									"    // including headers\r",
									"\r",
									"    pm.variables.set('signature', signature);\r",
									"    pm.variables.set('nonce', nonce);\r",
									"    pm.variables.set('alg', \"SHA256\");\r",
									"    pm.variables.set('timestamp', momentTmp);\r",
									"    pm.variables.set('AuthBearer', bearer);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthBearer}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Algorithm",
								"value": "{{alg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "\"INSERIR CLIENT KEY\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"produto\": \"9\",\r\n    \"negociacao\": \"28560222652\",\r\n    \"nossoNumero\": \"42460000013\",\r\n    \"dadosPagador\": {\r\n        \"sacado\": \"\",\r\n        \"cpfCnpjSacado\": {\r\n            \"cpfCnpj\": 0,\r\n            \"filial\": 0,\r\n            \"controle\": 0\r\n        },\r\n        \"endereco\": \"\",\r\n        \"cep\": 0,\r\n        \"sufixo\": 0,\r\n        \"nomeSacador\": \"\",\r\n        \"aceite\": \"\",\r\n        \"cpfCnpjSacador\": {\r\n            \"cpfCnpj\": 0,\r\n            \"filial\": 0,\r\n            \"controle\": 0\r\n        },\r\n        \"emailSacado\": \"\"\r\n    },\r\n    \"cpfCnpj\": {\r\n        \"cpfCnpj\": 31759488,\r\n        \"filial\": 0,\r\n        \"controle\": 55\r\n    },\r\n    \"dadosTitulo\": {\r\n        \"seuNumero\": \"\",\r\n        \"dataEmissao\": 0,\r\n        \"especie\": \"\",\r\n        \"protesto\": {\r\n            \"codInstrucaoProtesto\": 0,\r\n            \"qtdeDiasProtesto\": 0\r\n        },\r\n        \"decurso\": {\r\n            \"codDecursoPrazo\": 0,\r\n            \"diasDecursoPrazo\": 0\r\n        },\r\n        \"abatimento\": {\r\n            \"tipoAbatimento\": 0,\r\n            \"valorAbatimento\": 0\r\n        },\r\n        \"dataDesc1\": 0,\r\n        \"valDesc1\": 0,\r\n        \"codValDe1\": 0,\r\n        \"tipoDesc1\": 0,\r\n        \"dataDesc2\": 0,\r\n        \"valDesc2\": 0,\r\n        \"codValDe2\": 0,\r\n        \"tipoDesc2\": 0,\r\n        \"dataDesc3\": 0,\r\n        \"valDesc3\": 0,\r\n        \"codValDe3\": 0,\r\n        \"tipoDesc3\": 0,\r\n        \"codigoControleParticipante\": \"\",\r\n        \"indicadorAvisoSacado\": \"\",\r\n        \"comissaoPermanencia\": {\r\n            \"diasComissaoPermanencia\": 0,\r\n            \"valorComissaoPermanencia\": 0,\r\n            \"codigoComissaoPermanencia\": 0\r\n        },\r\n        \"codigoMulta\": 0,\r\n        \"diasMulta\": 0,\r\n        \"valorMulta\": 0,\r\n        \"codigoNegativacao\": 0,\r\n        \"diasNegativacao\": 0,\r\n        \"pagamentoParcial\": \"\",\r\n        \"qtdePagamentoParcial\": 0,\r\n        \"vencimento\": {\r\n            \"dataVencimento\": \"10092024\",\r\n            \"tipoVencimento\": 0\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "https://proxy.api.prebanco.com.br/v1/boleto/alterar-titulo",
							"protocol": "https",
							"host": [
								"proxy",
								"api",
								"prebanco",
								"com",
								"br"
							],
							"path": [
								"v1",
								"boleto",
								"alterar-titulo"
							]
						}
					},
					"response": []
				},
				{
					"name": "BAIXAR BOLETO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**\r",
									"\r",
									"* Implementação do modelo Server-to-Server\r",
									"\r",
									"* @Author: bradesco-ob-squad-apinaoregulatoria@ciandt.com\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* INICIALIZANDO AS DEPENDENCIAS\r",
									"\r",
									"* Necessário ter as dependências abaixo: momentJS e jsrsasign\r",
									"\r",
									"*/\r",
									"\r",
									"var navigator = {}; //fake a navigator object for the lib\r",
									"\r",
									"var window = {}; //fake a window object for the lib\r",
									"\r",
									"eval(pm.globals.get(\"server_to_server_jsrsasign-js\")); //import javascript jsrsasign\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Carregando algumas variáveis relevantes para o processo\r",
									"\r",
									"* iat, exp e nonce. Além do timestamp para incluir nos headers\r",
									"\r",
									"*/\r",
									"\r",
									"// load values\r",
									"\r",
									"var now = new Date();\r",
									"\r",
									"var now1Hour = new Date();\r",
									"\r",
									"now1Hour.setHours(now.getHours() + 1);\r",
									"\r",
									"const BREAK_LINE = \"\\n\";\r",
									"\r",
									"const ALG_SHA256 = \"SHA256\";\r",
									"\r",
									"const ALG_SHA256_WITH_RSA = \"SHA256withRSA\";\r",
									"\r",
									"\r",
									"\r",
									"const iat = Math.floor(now.getTime() / 1000);\r",
									"\r",
									"const exp = Math.floor(now1Hour.getTime() / 1000);\r",
									"\r",
									"const nonce = now.getTime() + \"\";\r",
									"\r",
									"var momentTmp = moment(now).format((\"YYYY-MM-DDThh:mm:ssZ\"));\r",
									"\r",
									"// globals var\r",
									"\r",
									"const aud = pm.globals.get(\"server_to_server_aud\");\r",
									"\r",
									"const authTokenUrl = pm.globals.get(\"server_to_server_auth_token\");\r",
									"\r",
									"const accessToken = pm.globals.get(\"server_to_server_access_token\");\r",
									"\r",
									"const privateKey = pm.globals.get(\"server_to_server_privateKey\");\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi um texto referente aos dados do request\r",
									"\r",
									"* Este valor será assinado pela chave privada do requisitante posteriormente e incluido no header X-Brad-Signature\r",
									"\r",
									"*/\r",
									"\r",
									"function buildRequestText(authToken) {\r",
									"\r",
									"    var requestBody = (pm.request.body.raw) ? pm.request.body.raw : \"\";\r",
									"    var requestText = [pm.request.method, pm.request.url.getPath(), pm.request.url.getQueryString(),\r",
									"\r",
									"        requestBody, authToken, nonce, momentTmp, ALG_SHA256].join(BREAK_LINE);\r",
									"\r",
									"    return requestText;\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi a variavel Assertion\r",
									"\r",
									"* Este valor é utilizado durante na solicitação do token de acesso da API /auth/server/v1.1/token\r",
									"\r",
									"* Trata-se de um token JWT assinado com a chave privada de quem está realizando a requisição\r",
									"\r",
									"*/\r",
									"\r",
									"function buildAssertion() {\r",
									"    var header = {\r",
									"        \"alg\": \"RS256\",\r",
									"        \"typ\": \"JWT\"\r",
									"    };\r",
									"    var payload = {\r",
									"        \"aud\": aud,\r",
									"        \"sub\": accessToken,\r",
									"        \"iat\": iat,\r",
									"        \"exp\": exp,\r",
									"        \"jti\": nonce,\r",
									"        \"ver\": \"1.1\"\r",
									"    };\r",
									"\r",
									"    var sHeader = JSON.stringify(header);\r",
									"    var sPayload = JSON.stringify(payload);\r",
									"    var assertion = null;\r",
									"    if (privateKey) {\r",
									"        assertion = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, privateKey);\r",
									"    }\r",
									"    return assertion;\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Assina o texto referente aos dados do request\r",
									"\r",
									"*/\r",
									"\r",
									"function signRequestText(requestText) {\r",
									"\r",
									"    var kjursig = new KJUR.crypto.Signature({ \"alg\": ALG_SHA256_WITH_RSA });\r",
									"    kjursig.init(privateKey);\r",
									"    kjursig.updateString(requestText);\r",
									"    var hash = kjursig.sign();\r",
									"    return hextob64(hash);\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Request referente a API /auth/server/v1.1/token\r",
									"\r",
									"* É necessario inicialmente realizar uma autenticação do usuário, para em seguida, seguir com a realização da API que o requisitante deseja\r",
									"\r",
									"*/\r",
									"\r",
									"var requestTokenOptions = {\r",
									"    url: authTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"\r",
									"            { key: 'grant_type', value: 'urn:ietf:params:oauth:grant-type:jwt-bearer' },\r",
									"            { key: 'assertion', value: buildAssertion() },\r",
									"\r",
									"        ]\r",
									"\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"pm.sendRequest(requestTokenOptions, function (err, response) {\r",
									"\r",
									"    const jsonData = response.json();\r",
									"\r",
									"    var bearer = jsonData.token_type + \" \" + jsonData.access_token;\r",
									"    var authToken = jsonData.access_token;\r",
									"    var requestText = buildRequestText(authToken)\r",
									"    var signature = signRequestText(requestText);\r",
									"\r",
									"    // including headers\r",
									"\r",
									"    pm.variables.set('signature', signature);\r",
									"    pm.variables.set('nonce', nonce);\r",
									"    pm.variables.set('alg', \"SHA256\");\r",
									"    pm.variables.set('timestamp', momentTmp);\r",
									"    pm.variables.set('AuthBearer', bearer);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthBearer}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Algorithm",
								"value": "{{alg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "\"INSERIR CLIENT KEY\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cpfCnpj\": {\r\n        \"cpfCnpj\": 31759488,\r\n        \"filial\": 0,\r\n        \"controle\": 55\r\n    },\r\n    \"produto\": 9,\r\n    \"negociacao\": 28560222652,\r\n    \"nossoNumero\": 42630000001,\r\n    \"sequencia\": 0,\r\n    \"codigoBaixa\": 57\r\n}"
						},
						"url": {
							"raw": "https://proxy.api.prebanco.com.br/v1/boleto/titulo-baixar",
							"protocol": "https",
							"host": [
								"proxy",
								"api",
								"prebanco",
								"com",
								"br"
							],
							"path": [
								"v1",
								"boleto",
								"titulo-baixar"
							]
						}
					},
					"response": []
				},
				{
					"name": "ESTORNO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**\r",
									"\r",
									"* Implementação do modelo Server-to-Server\r",
									"\r",
									"* @Author: bradesco-ob-squad-apinaoregulatoria@ciandt.com\r",
									"\r",
									"*/\r",
									"\r",
									"/**\r",
									"\r",
									"* INICIALIZANDO AS DEPENDENCIAS\r",
									"\r",
									"* Necessário ter as dependências abaixo: momentJS e jsrsasign\r",
									"\r",
									"*/\r",
									"\r",
									"var navigator = {}; //fake a navigator object for the lib\r",
									"\r",
									"var window = {}; //fake a window object for the lib\r",
									"\r",
									"eval(pm.globals.get(\"server_to_server_jsrsasign-js\")); //import javascript jsrsasign\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Carregando algumas variáveis relevantes para o processo\r",
									"\r",
									"* iat, exp e nonce. Além do timestamp para incluir nos headers\r",
									"\r",
									"*/\r",
									"\r",
									"// load values\r",
									"\r",
									"var now = new Date();\r",
									"\r",
									"var now1Hour = new Date();\r",
									"\r",
									"now1Hour.setHours(now.getHours() + 1);\r",
									"\r",
									"const BREAK_LINE = \"\\n\";\r",
									"\r",
									"const ALG_SHA256 = \"SHA256\";\r",
									"\r",
									"const ALG_SHA256_WITH_RSA = \"SHA256withRSA\";\r",
									"\r",
									"\r",
									"\r",
									"const iat = Math.floor(now.getTime() / 1000);\r",
									"\r",
									"const exp = Math.floor(now1Hour.getTime() / 1000);\r",
									"\r",
									"const nonce = now.getTime() + \"\";\r",
									"\r",
									"var momentTmp = moment(now).format((\"YYYY-MM-DDThh:mm:ssZ\"));\r",
									"\r",
									"// globals var\r",
									"\r",
									"const aud = pm.globals.get(\"server_to_server_aud\");\r",
									"\r",
									"const authTokenUrl = pm.globals.get(\"server_to_server_auth_token\");\r",
									"\r",
									"const accessToken = pm.globals.get(\"server_to_server_access_token\");\r",
									"\r",
									"const privateKey = pm.globals.get(\"server_to_server_privateKey\");\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi um texto referente aos dados do request\r",
									"\r",
									"* Este valor será assinado pela chave privada do requisitante posteriormente e incluido no header X-Brad-Signature\r",
									"\r",
									"*/\r",
									"\r",
									"function buildRequestText(authToken) {\r",
									"\r",
									"    var requestBody = (pm.request.body.raw) ? pm.request.body.raw : \"\";\r",
									"    var requestText = [pm.request.method, pm.request.url.getPath(), pm.request.url.getQueryString(),\r",
									"\r",
									"        requestBody, authToken, nonce, momentTmp, ALG_SHA256].join(BREAK_LINE);\r",
									"\r",
									"    return requestText;\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi a variavel Assertion\r",
									"\r",
									"* Este valor é utilizado durante na solicitação do token de acesso da API /auth/server/v1.1/token\r",
									"\r",
									"* Trata-se de um token JWT assinado com a chave privada de quem está realizando a requisição\r",
									"\r",
									"*/\r",
									"\r",
									"function buildAssertion() {\r",
									"    var header = {\r",
									"        \"alg\": \"RS256\",\r",
									"        \"typ\": \"JWT\"\r",
									"    };\r",
									"    var payload = {\r",
									"        \"aud\": aud,\r",
									"        \"sub\": accessToken,\r",
									"        \"iat\": iat,\r",
									"        \"exp\": exp,\r",
									"        \"jti\": nonce,\r",
									"        \"ver\": \"1.1\"\r",
									"    };\r",
									"\r",
									"    var sHeader = JSON.stringify(header);\r",
									"    var sPayload = JSON.stringify(payload);\r",
									"    var assertion = null;\r",
									"    if (privateKey) {\r",
									"        assertion = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, privateKey);\r",
									"    }\r",
									"    return assertion;\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Assina o texto referente aos dados do request\r",
									"\r",
									"*/\r",
									"\r",
									"function signRequestText(requestText) {\r",
									"\r",
									"    var kjursig = new KJUR.crypto.Signature({ \"alg\": ALG_SHA256_WITH_RSA });\r",
									"    kjursig.init(privateKey);\r",
									"    kjursig.updateString(requestText);\r",
									"    var hash = kjursig.sign();\r",
									"    return hextob64(hash);\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Request referente a API /auth/server/v1.1/token\r",
									"\r",
									"* É necessario inicialmente realizar uma autenticação do usuário, para em seguida, seguir com a realização da API que o requisitante deseja\r",
									"\r",
									"*/\r",
									"\r",
									"var requestTokenOptions = {\r",
									"    url: authTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"\r",
									"            { key: 'grant_type', value: 'urn:ietf:params:oauth:grant-type:jwt-bearer' },\r",
									"            { key: 'assertion', value: buildAssertion() },\r",
									"\r",
									"        ]\r",
									"\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"pm.sendRequest(requestTokenOptions, function (err, response) {\r",
									"\r",
									"    const jsonData = response.json();\r",
									"\r",
									"    var bearer = jsonData.token_type + \" \" + jsonData.access_token;\r",
									"    var authToken = jsonData.access_token;\r",
									"    var requestText = buildRequestText(authToken)\r",
									"    var signature = signRequestText(requestText);\r",
									"\r",
									"    // including headers\r",
									"\r",
									"    pm.variables.set('signature', signature);\r",
									"    pm.variables.set('nonce', nonce);\r",
									"    pm.variables.set('alg', \"SHA256\");\r",
									"    pm.variables.set('timestamp', momentTmp);\r",
									"    pm.variables.set('AuthBearer', bearer);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthBearer}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Algorithm",
								"value": "{{alg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "\"INSERIR CLIENT KEY\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cpfCnpj\": {\r\n        \"cpfCnpj\": 31759488,\r\n        \"filial\": 0,\r\n        \"controle\": 55\r\n    },\r\n    \"produto\": 9,\r\n    \"negociacao\": 28560222652,\r\n    \"nossoNumero\": 42630000001,\r\n    \"sequencia\": 0,\r\n    \"horaSolicitacao\": \"2024-09-19-10.24.29.513939\",\r\n    \"status\": 57,\r\n    \"statusAnterior\": 1\r\n}"
						},
						"url": {
							"raw": "https://proxy.api.prebanco.com.br/v1/boleto/titulo-estornar",
							"protocol": "https",
							"host": [
								"proxy",
								"api",
								"prebanco",
								"com",
								"br"
							],
							"path": [
								"v1",
								"boleto",
								"titulo-estornar"
							]
						}
					},
					"response": []
				},
				{
					"name": "CONSULTA TITULO (UNITÁRIO)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**\r",
									"\r",
									"* Implementação do modelo Server-to-Server\r",
									"\r",
									"* @Author: bradesco-ob-squad-apinaoregulatoria@ciandt.com\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* INICIALIZANDO AS DEPENDENCIAS\r",
									"\r",
									"* Necessário ter as dependências abaixo: momentJS e jsrsasign\r",
									"\r",
									"*/\r",
									"\r",
									"var navigator = {}; //fake a navigator object for the lib\r",
									"\r",
									"var window = {}; //fake a window object for the lib\r",
									"\r",
									"eval(pm.globals.get(\"server_to_server_jsrsasign-js\")); //import javascript jsrsasign\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Carregando algumas variáveis relevantes para o processo\r",
									"\r",
									"* iat, exp e nonce. Além do timestamp para incluir nos headers\r",
									"\r",
									"*/\r",
									"\r",
									"// load values\r",
									"\r",
									"var now = new Date();\r",
									"\r",
									"var now1Hour = new Date();\r",
									"\r",
									"now1Hour.setHours(now.getHours() + 1);\r",
									"\r",
									"const BREAK_LINE = \"\\n\";\r",
									"\r",
									"const ALG_SHA256 = \"SHA256\";\r",
									"\r",
									"const ALG_SHA256_WITH_RSA = \"SHA256withRSA\";\r",
									"\r",
									"\r",
									"\r",
									"const iat = Math.floor(now.getTime() / 1000);\r",
									"\r",
									"const exp = Math.floor(now1Hour.getTime() / 1000);\r",
									"\r",
									"const nonce = now.getTime() + \"\";\r",
									"\r",
									"var momentTmp = moment(now).format((\"YYYY-MM-DDThh:mm:ssZ\"));\r",
									"\r",
									"// globals var\r",
									"\r",
									"const aud = pm.globals.get(\"server_to_server_aud\");\r",
									"\r",
									"const authTokenUrl = pm.globals.get(\"server_to_server_auth_token\");\r",
									"\r",
									"const accessToken = pm.globals.get(\"server_to_server_access_token\");\r",
									"\r",
									"const privateKey = pm.globals.get(\"server_to_server_privateKey\");\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi um texto referente aos dados do request\r",
									"\r",
									"* Este valor será assinado pela chave privada do requisitante posteriormente e incluido no header X-Brad-Signature\r",
									"\r",
									"*/\r",
									"\r",
									"function buildRequestText(authToken) {\r",
									"\r",
									"    var requestBody = (pm.request.body.raw) ? pm.request.body.raw : \"\";\r",
									"    var requestText = [pm.request.method, pm.request.url.getPath(), pm.request.url.getQueryString(),\r",
									"\r",
									"        requestBody, authToken, nonce, momentTmp, ALG_SHA256].join(BREAK_LINE);\r",
									"\r",
									"    return requestText;\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi a variavel Assertion\r",
									"\r",
									"* Este valor é utilizado durante na solicitação do token de acesso da API /auth/server/v1.1/token\r",
									"\r",
									"* Trata-se de um token JWT assinado com a chave privada de quem está realizando a requisição\r",
									"\r",
									"*/\r",
									"\r",
									"function buildAssertion() {\r",
									"    var header = {\r",
									"        \"alg\": \"RS256\",\r",
									"        \"typ\": \"JWT\"\r",
									"    };\r",
									"    var payload = {\r",
									"        \"aud\": aud,\r",
									"        \"sub\": accessToken,\r",
									"        \"iat\": iat,\r",
									"        \"exp\": exp,\r",
									"        \"jti\": nonce,\r",
									"        \"ver\": \"1.1\"\r",
									"    };\r",
									"\r",
									"    var sHeader = JSON.stringify(header);\r",
									"    var sPayload = JSON.stringify(payload);\r",
									"    var assertion = null;\r",
									"    if (privateKey) {\r",
									"        assertion = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, privateKey);\r",
									"    }\r",
									"    return assertion;\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Assina o texto referente aos dados do request\r",
									"\r",
									"*/\r",
									"\r",
									"function signRequestText(requestText) {\r",
									"\r",
									"    var kjursig = new KJUR.crypto.Signature({ \"alg\": ALG_SHA256_WITH_RSA });\r",
									"    kjursig.init(privateKey);\r",
									"    kjursig.updateString(requestText);\r",
									"    var hash = kjursig.sign();\r",
									"    return hextob64(hash);\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Request referente a API /auth/server/v1.1/token\r",
									"\r",
									"* É necessario inicialmente realizar uma autenticação do usuário, para em seguida, seguir com a realização da API que o requisitante deseja\r",
									"\r",
									"*/\r",
									"\r",
									"var requestTokenOptions = {\r",
									"    url: authTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"\r",
									"            { key: 'grant_type', value: 'urn:ietf:params:oauth:grant-type:jwt-bearer' },\r",
									"            { key: 'assertion', value: buildAssertion() },\r",
									"\r",
									"        ]\r",
									"\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"pm.sendRequest(requestTokenOptions, function (err, response) {\r",
									"\r",
									"    const jsonData = response.json();\r",
									"\r",
									"    var bearer = jsonData.token_type + \" \" + jsonData.access_token;\r",
									"    var authToken = jsonData.access_token;\r",
									"    var requestText = buildRequestText(authToken)\r",
									"    var signature = signRequestText(requestText);\r",
									"\r",
									"    // including headers\r",
									"\r",
									"    pm.variables.set('signature', signature);\r",
									"    pm.variables.set('nonce', nonce);\r",
									"    pm.variables.set('alg', \"SHA256\");\r",
									"    pm.variables.set('timestamp', momentTmp);\r",
									"    pm.variables.set('AuthBearer', bearer);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthBearer}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Algorithm",
								"value": "{{alg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "\"INSERIR CLIENT KEY\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cpfCnpj\": {\r\n        \"cpfCnpj\": 31759488,\r\n        \"filial\": 0,\r\n        \"controle\": 55\r\n    },\r\n    \"produto\": 9,\r\n    \"negociacao\": 28560222652,\r\n    \"nossoNumero\": 42630000001,\r\n    \"sequencia\": 0,\r\n    \"status\": 0\r\n}"
						},
						"url": {
							"raw": "https://proxy.api.prebanco.com.br/v1/boleto/titulo-consultar",
							"protocol": "https",
							"host": [
								"proxy",
								"api",
								"prebanco",
								"com",
								"br"
							],
							"path": [
								"v1",
								"boleto",
								"titulo-consultar"
							]
						}
					},
					"response": []
				},
				{
					"name": "LISTAR TITULO LIQUIDADO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**\r",
									"\r",
									"* Implementação do modelo Server-to-Server\r",
									"\r",
									"* @Author: bradesco-ob-squad-apinaoregulatoria@ciandt.com\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* INICIALIZANDO AS DEPENDENCIAS\r",
									"\r",
									"* Necessário ter as dependências abaixo: momentJS e jsrsasign\r",
									"\r",
									"*/\r",
									"\r",
									"var navigator = {}; //fake a navigator object for the lib\r",
									"\r",
									"var window = {}; //fake a window object for the lib\r",
									"\r",
									"eval(pm.globals.get(\"server_to_server_jsrsasign-js\")); //import javascript jsrsasign\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Carregando algumas variáveis relevantes para o processo\r",
									"\r",
									"* iat, exp e nonce. Além do timestamp para incluir nos headers\r",
									"\r",
									"*/\r",
									"\r",
									"// load values\r",
									"\r",
									"var now = new Date();\r",
									"\r",
									"var now1Hour = new Date();\r",
									"\r",
									"now1Hour.setHours(now.getHours() + 1);\r",
									"\r",
									"const BREAK_LINE = \"\\n\";\r",
									"\r",
									"const ALG_SHA256 = \"SHA256\";\r",
									"\r",
									"const ALG_SHA256_WITH_RSA = \"SHA256withRSA\";\r",
									"\r",
									"\r",
									"\r",
									"const iat = Math.floor(now.getTime() / 1000);\r",
									"\r",
									"const exp = Math.floor(now1Hour.getTime() / 1000);\r",
									"\r",
									"const nonce = now.getTime() + \"\";\r",
									"\r",
									"var momentTmp = moment(now).format((\"YYYY-MM-DDThh:mm:ssZ\"));\r",
									"\r",
									"// globals var\r",
									"\r",
									"const aud = pm.globals.get(\"server_to_server_aud\");\r",
									"\r",
									"const authTokenUrl = pm.globals.get(\"server_to_server_auth_token\");\r",
									"\r",
									"const accessToken = pm.globals.get(\"server_to_server_access_token\");\r",
									"\r",
									"const privateKey = pm.globals.get(\"server_to_server_privateKey\");\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi um texto referente aos dados do request\r",
									"\r",
									"* Este valor será assinado pela chave privada do requisitante posteriormente e incluido no header X-Brad-Signature\r",
									"\r",
									"*/\r",
									"\r",
									"function buildRequestText(authToken) {\r",
									"\r",
									"    var requestBody = (pm.request.body.raw) ? pm.request.body.raw : \"\";\r",
									"    var requestText = [pm.request.method, pm.request.url.getPath(), pm.request.url.getQueryString(),\r",
									"\r",
									"        requestBody, authToken, nonce, momentTmp, ALG_SHA256].join(BREAK_LINE);\r",
									"\r",
									"    return requestText;\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi a variavel Assertion\r",
									"\r",
									"* Este valor é utilizado durante na solicitação do token de acesso da API /auth/server/v1.1/token\r",
									"\r",
									"* Trata-se de um token JWT assinado com a chave privada de quem está realizando a requisição\r",
									"\r",
									"*/\r",
									"\r",
									"function buildAssertion() {\r",
									"    var header = {\r",
									"        \"alg\": \"RS256\",\r",
									"        \"typ\": \"JWT\"\r",
									"    };\r",
									"    var payload = {\r",
									"        \"aud\": aud,\r",
									"        \"sub\": accessToken,\r",
									"        \"iat\": iat,\r",
									"        \"exp\": exp,\r",
									"        \"jti\": nonce,\r",
									"        \"ver\": \"1.1\"\r",
									"    };\r",
									"\r",
									"    var sHeader = JSON.stringify(header);\r",
									"    var sPayload = JSON.stringify(payload);\r",
									"    var assertion = null;\r",
									"    if (privateKey) {\r",
									"        assertion = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, privateKey);\r",
									"    }\r",
									"    return assertion;\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Assina o texto referente aos dados do request\r",
									"\r",
									"*/\r",
									"\r",
									"function signRequestText(requestText) {\r",
									"\r",
									"    var kjursig = new KJUR.crypto.Signature({ \"alg\": ALG_SHA256_WITH_RSA });\r",
									"    kjursig.init(privateKey);\r",
									"    kjursig.updateString(requestText);\r",
									"    var hash = kjursig.sign();\r",
									"    return hextob64(hash);\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Request referente a API /auth/server/v1.1/token\r",
									"\r",
									"* É necessario inicialmente realizar uma autenticação do usuário, para em seguida, seguir com a realização da API que o requisitante deseja\r",
									"\r",
									"*/\r",
									"\r",
									"var requestTokenOptions = {\r",
									"    url: authTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"\r",
									"            { key: 'grant_type', value: 'urn:ietf:params:oauth:grant-type:jwt-bearer' },\r",
									"            { key: 'assertion', value: buildAssertion() },\r",
									"\r",
									"        ]\r",
									"\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"pm.sendRequest(requestTokenOptions, function (err, response) {\r",
									"\r",
									"    const jsonData = response.json();\r",
									"\r",
									"    var bearer = jsonData.token_type + \" \" + jsonData.access_token;\r",
									"    var authToken = jsonData.access_token;\r",
									"    var requestText = buildRequestText(authToken)\r",
									"    var signature = signRequestText(requestText);\r",
									"\r",
									"    // including headers\r",
									"\r",
									"    pm.variables.set('signature', signature);\r",
									"    pm.variables.set('nonce', nonce);\r",
									"    pm.variables.set('alg', \"SHA256\");\r",
									"    pm.variables.set('timestamp', momentTmp);\r",
									"    pm.variables.set('AuthBearer', bearer);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthBearer}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Algorithm",
								"value": "{{alg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "\"INSERIR CLIENT KEY\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cpfCnpj\": {\r\n        \"cpfCnpj\": 31759488,\r\n        \"filial\": 0,\r\n        \"controle\": 55\r\n    },\r\n    \"produto\": 9,\r\n    \"negociacao\": 28560222652,\r\n    \"dataMovimentoDe\": 21062017,\r\n    \"dataMovimentoAte\": 11062024,\r\n    \"dataPagamentoDe\": 21062017,\r\n    \"dataPagamentoAte\": 11062024,\r\n    \"origemPagamento\": 0,\r\n    \"valorTituloDe\": 0,\r\n    \"valorTituloAte\": 0,\r\n    \"paginaAnterior\": 0\r\n}"
						},
						"url": {
							"raw": "https://proxy.api.prebanco.com.br/v1/boleto/listar-titulo-liquidado/listar",
							"protocol": "https",
							"host": [
								"proxy",
								"api",
								"prebanco",
								"com",
								"br"
							],
							"path": [
								"v1",
								"boleto",
								"listar-titulo-liquidado",
								"listar"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orientações",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "Orientações para utilização da Collection.\r\n\r\nObs.: A collection não elimina a necessidade de construção do código que realize a construção dos valores dos headers de acesso na aplicação por parte do parceiro, ela possibilita a realização de testes nos produtos do banco que utilizem a segurança server-to-server de forma otimizada, uma vez que o parceiro já tenha feito o processo de cadastro junto ao banco, conforme orientado na seção Criar Client_id no Guia de consumo das APIs do Bradesco.\r\n\r\nPasso 1:\r\n    1. Expandir a pasta Pre-SetUp presente na collection,\r\n    2. Executar \"0. Load jsrsasign\". \"Executar apenas uma vez\"\r\n\r\nPasso 2:\r\n    1. Expandir a pasta Pre-SetUp presente na Collection;\r\n    2. Clicar em Config Parceiro;\r\n    3. Clicar em Scripts;\r\n    4. Preencha os seguintes campos;\r\n        a) var server_to_server_access_token = \"Inserir client Key ou ID\";\r\n        b) var server_to_server_privateKey = \"Inserir certificado privado (Em linha única)\"\r\n    5. Clicar em Send;\r\n\r\nFeito isso, você estará apto para utilizar as endpoints das APIs Cobrança.\r\n\r\nObs.: Antes de iniciar os testes, é necessário que seja executado o Config Parceiro (Chamada do Token), com isso, vá em Pre-SetUp -> Config Parceiro -> Send.",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				}
			},
			"response": []
		}
	]
}