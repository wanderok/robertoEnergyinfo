{
	"info": {
		"_postman_id": "e7508570-7551-489b-852c-c56ae613b70b",
		"name": "API SALDO e EXTRATO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27732181"
	},
	"item": [
		{
			"name": "Pre-SetUp",
			"item": [
				{
					"name": "0. Load jsrsasign (executar apenas 1 vez)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"server_to_server_jsrsasign-js\", responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
							"protocol": "http",
							"host": [
								"kjur",
								"github",
								"io"
							],
							"path": [
								"jsrsasign",
								"jsrsasign-latest-all-min.js"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Config Parceiro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var server_to_server_aud = \"https://proxy.api.prebanco.com.br/auth/server/v1.1/token\";",
									"var server_to_server_auth_token = \"https://proxy.api.prebanco.com.br/auth/server/v1.1/token\";",
									"var server_to_server_access_token = \"\";",
									"var server_to_server_privateKey = \"\";",
									"",
									"pm.globals.set(\"server_to_server_aud\", server_to_server_aud);",
									"pm.globals.set(\"server_to_server_auth_token\", server_to_server_auth_token);",
									"pm.globals.set(\"server_to_server_access_token\", server_to_server_access_token);",
									"pm.globals.set(\"server_to_server_privateKey\", server_to_server_privateKey);",
									"console.log(\"cadastrado com sucesso\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rotas",
			"item": [
				{
					"name": "SALDO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**\r",
									"\r",
									"* Implementação do modelo Server-to-Server\r",
									"\r",
									"* @Author: bradesco-ob-squad-apinaoregulatoria@ciandt.com\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* INICIALIZANDO AS DEPENDENCIAS\r",
									"\r",
									"* Necessário ter as dependências abaixo: momentJS e jsrsasign\r",
									"\r",
									"*/\r",
									"\r",
									"var navigator = {}; //fake a navigator object for the lib\r",
									"\r",
									"var window = {}; //fake a window object for the lib\r",
									"\r",
									"eval(pm.globals.get(\"server_to_server_jsrsasign-js\")); //import javascript jsrsasign\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Carregando algumas variáveis relevantes para o processo\r",
									"\r",
									"* iat, exp e nonce. Além do timestamp para incluir nos headers\r",
									"\r",
									"*/\r",
									"\r",
									"// load values\r",
									"\r",
									"var now = new Date();\r",
									"\r",
									"var now1Hour = new Date();\r",
									"\r",
									"now1Hour.setHours(now.getHours() + 1);\r",
									"\r",
									"const BREAK_LINE = \"\\n\";\r",
									"\r",
									"const ALG_SHA256 = \"SHA256\";\r",
									"\r",
									"const ALG_SHA256_WITH_RSA = \"SHA256withRSA\";\r",
									"\r",
									"\r",
									"\r",
									"const iat = Math.floor(now.getTime() / 1000);\r",
									"\r",
									"const exp = Math.floor(now1Hour.getTime() / 1000);\r",
									"\r",
									"const nonce = now.getTime() + \"\";\r",
									"\r",
									"var momentTmp = moment(now).format((\"YYYY-MM-DDThh:mm:ssZ\"));\r",
									"\r",
									"// globals var\r",
									"\r",
									"const aud = pm.globals.get(\"server_to_server_aud\");\r",
									"\r",
									"const authTokenUrl = pm.globals.get(\"server_to_server_auth_token\");\r",
									"\r",
									"const accessToken = pm.globals.get(\"server_to_server_access_token\");\r",
									"\r",
									"const privateKey = pm.globals.get(\"server_to_server_privateKey\");\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi um texto referente aos dados do request\r",
									"\r",
									"* Este valor será assinado pela chave privada do requisitante posteriormente e incluido no header X-Brad-Signature\r",
									"\r",
									"*/\r",
									"\r",
									"function buildRequestText(authToken) {\r",
									"\r",
									"    var requestBody = (pm.request.body.raw) ? pm.request.body.raw : \"\";\r",
									"    var requestText = [pm.request.method, pm.request.url.getPath(), pm.request.url.getQueryString(),\r",
									"\r",
									"        requestBody, authToken, nonce, momentTmp, ALG_SHA256].join(BREAK_LINE);\r",
									"\r",
									"    return requestText;\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi a variavel Assertion\r",
									"\r",
									"* Este valor é utilizado durante na solicitação do token de acesso da API /auth/server/v1.1/token\r",
									"\r",
									"* Trata-se de um token JWT assinado com a chave privada de quem está realizando a requisição\r",
									"\r",
									"*/\r",
									"\r",
									"function buildAssertion() {\r",
									"    var header = {\r",
									"        \"alg\": \"RS256\",\r",
									"        \"typ\": \"JWT\"\r",
									"    };\r",
									"    var payload = {\r",
									"        \"aud\": aud,\r",
									"        \"sub\": accessToken,\r",
									"        \"iat\": iat,\r",
									"        \"exp\": exp,\r",
									"        \"jti\": nonce,\r",
									"        \"ver\": \"1.1\"\r",
									"    };\r",
									"\r",
									"    var sHeader = JSON.stringify(header);\r",
									"    var sPayload = JSON.stringify(payload);\r",
									"    var assertion = null;\r",
									"    if (privateKey) {\r",
									"        assertion = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, privateKey);\r",
									"    }\r",
									"    return assertion;\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Assina o texto referente aos dados do request\r",
									"\r",
									"*/\r",
									"\r",
									"function signRequestText(requestText) {\r",
									"\r",
									"    var kjursig = new KJUR.crypto.Signature({ \"alg\": ALG_SHA256_WITH_RSA });\r",
									"    kjursig.init(privateKey);\r",
									"    kjursig.updateString(requestText);\r",
									"    var hash = kjursig.sign();\r",
									"    return hextob64(hash);\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Request referente a API /auth/server/v1.1/token\r",
									"\r",
									"* É necessario inicialmente realizar uma autenticação do usuário, para em seguida, seguir com a realização da API que o requisitante deseja\r",
									"\r",
									"*/\r",
									"\r",
									"var requestTokenOptions = {\r",
									"    url: authTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"\r",
									"            { key: 'grant_type', value: 'urn:ietf:params:oauth:grant-type:jwt-bearer' },\r",
									"            { key: 'assertion', value: buildAssertion() },\r",
									"\r",
									"        ]\r",
									"\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"pm.sendRequest(requestTokenOptions, function (err, response) {\r",
									"\r",
									"    const jsonData = response.json();\r",
									"\r",
									"    var bearer = jsonData.token_type + \" \" + jsonData.access_token;\r",
									"    var authToken = jsonData.access_token;\r",
									"    var requestText = buildRequestText(authToken)\r",
									"    var signature = signRequestText(requestText);\r",
									"\r",
									"    // including headers\r",
									"\r",
									"    pm.variables.set('signature', signature);\r",
									"    pm.variables.set('nonce', nonce);\r",
									"    pm.variables.set('alg', \"SHA256\");\r",
									"    pm.variables.set('timestamp', momentTmp);\r",
									"    pm.variables.set('AuthBearer', bearer);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthBearer}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Algorithm",
								"value": "{{alg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "b53712e4-419f-4197-8b39-5d480930cbf2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://proxy.api.prebanco.com.br/v1/contas/fornecimento/saldos?agencia=3995&conta=75557",
							"protocol": "https",
							"host": [
								"proxy",
								"api",
								"prebanco",
								"com",
								"br"
							],
							"path": [
								"v1",
								"contas",
								"fornecimento",
								"saldos"
							],
							"query": [
								{
									"key": "agencia",
									"value": "3995"
								},
								{
									"key": "conta",
									"value": "75557"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EXTRATO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**\r",
									"\r",
									"* Implementação do modelo Server-to-Server\r",
									"\r",
									"* @Author: bradesco-ob-squad-apinaoregulatoria@ciandt.com\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* INICIALIZANDO AS DEPENDENCIAS\r",
									"\r",
									"* Necessário ter as dependências abaixo: momentJS e jsrsasign\r",
									"\r",
									"*/\r",
									"\r",
									"var navigator = {}; //fake a navigator object for the lib\r",
									"\r",
									"var window = {}; //fake a window object for the lib\r",
									"\r",
									"eval(pm.globals.get(\"server_to_server_jsrsasign-js\")); //import javascript jsrsasign\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Carregando algumas variáveis relevantes para o processo\r",
									"\r",
									"* iat, exp e nonce. Além do timestamp para incluir nos headers\r",
									"\r",
									"*/\r",
									"\r",
									"// load values\r",
									"\r",
									"var now = new Date();\r",
									"\r",
									"var now1Hour = new Date();\r",
									"\r",
									"now1Hour.setHours(now.getHours() + 1);\r",
									"\r",
									"const BREAK_LINE = \"\\n\";\r",
									"\r",
									"const ALG_SHA256 = \"SHA256\";\r",
									"\r",
									"const ALG_SHA256_WITH_RSA = \"SHA256withRSA\";\r",
									"\r",
									"\r",
									"\r",
									"const iat = Math.floor(now.getTime() / 1000);\r",
									"\r",
									"const exp = Math.floor(now1Hour.getTime() / 1000);\r",
									"\r",
									"const nonce = now.getTime() + \"\";\r",
									"\r",
									"var momentTmp = moment(now).format((\"YYYY-MM-DDThh:mm:ssZ\"));\r",
									"\r",
									"// globals var\r",
									"\r",
									"const aud = pm.globals.get(\"server_to_server_aud\");\r",
									"\r",
									"const authTokenUrl = pm.globals.get(\"server_to_server_auth_token\");\r",
									"\r",
									"const accessToken = pm.globals.get(\"server_to_server_access_token\");\r",
									"\r",
									"const privateKey = pm.globals.get(\"server_to_server_privateKey\");\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi um texto referente aos dados do request\r",
									"\r",
									"* Este valor será assinado pela chave privada do requisitante posteriormente e incluido no header X-Brad-Signature\r",
									"\r",
									"*/\r",
									"\r",
									"function buildRequestText(authToken) {\r",
									"\r",
									"    var requestBody = (pm.request.body.raw) ? pm.request.body.raw : \"\";\r",
									"    var requestText = [pm.request.method, pm.request.url.getPath(), pm.request.url.getQueryString(),\r",
									"\r",
									"        requestBody, authToken, nonce, momentTmp, ALG_SHA256].join(BREAK_LINE);\r",
									"\r",
									"    return requestText;\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Constroi a variavel Assertion\r",
									"\r",
									"* Este valor é utilizado durante na solicitação do token de acesso da API /auth/server/v1.1/token\r",
									"\r",
									"* Trata-se de um token JWT assinado com a chave privada de quem está realizando a requisição\r",
									"\r",
									"*/\r",
									"\r",
									"function buildAssertion() {\r",
									"    var header = {\r",
									"        \"alg\": \"RS256\",\r",
									"        \"typ\": \"JWT\"\r",
									"    };\r",
									"    var payload = {\r",
									"        \"aud\": aud,\r",
									"        \"sub\": accessToken,\r",
									"        \"iat\": iat,\r",
									"        \"exp\": exp,\r",
									"        \"jti\": nonce,\r",
									"        \"ver\": \"1.1\"\r",
									"    };\r",
									"\r",
									"    var sHeader = JSON.stringify(header);\r",
									"    var sPayload = JSON.stringify(payload);\r",
									"    var assertion = null;\r",
									"    if (privateKey) {\r",
									"        assertion = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, privateKey);\r",
									"    }\r",
									"    return assertion;\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/**\r",
									"\r",
									"* Assina o texto referente aos dados do request\r",
									"\r",
									"*/\r",
									"\r",
									"function signRequestText(requestText) {\r",
									"\r",
									"    var kjursig = new KJUR.crypto.Signature({ \"alg\": ALG_SHA256_WITH_RSA });\r",
									"    kjursig.init(privateKey);\r",
									"    kjursig.updateString(requestText);\r",
									"    var hash = kjursig.sign();\r",
									"    return hextob64(hash);\r",
									"\r",
									"}\r",
									"\r",
									"/**\r",
									"\r",
									"* Request referente a API /auth/server/v1.1/token\r",
									"\r",
									"* É necessario inicialmente realizar uma autenticação do usuário, para em seguida, seguir com a realização da API que o requisitante deseja\r",
									"\r",
									"*/\r",
									"\r",
									"var requestTokenOptions = {\r",
									"    url: authTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"\r",
									"            { key: 'grant_type', value: 'urn:ietf:params:oauth:grant-type:jwt-bearer' },\r",
									"            { key: 'assertion', value: buildAssertion() },\r",
									"\r",
									"        ]\r",
									"\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"pm.sendRequest(requestTokenOptions, function (err, response) {\r",
									"\r",
									"    const jsonData = response.json();\r",
									"\r",
									"    var bearer = jsonData.token_type + \" \" + jsonData.access_token;\r",
									"    var authToken = jsonData.access_token;\r",
									"    var requestText = buildRequestText(authToken)\r",
									"    var signature = signRequestText(requestText);\r",
									"\r",
									"    // including headers\r",
									"\r",
									"    pm.variables.set('signature', signature);\r",
									"    pm.variables.set('nonce', nonce);\r",
									"    pm.variables.set('alg', \"SHA256\");\r",
									"    pm.variables.set('timestamp', momentTmp);\r",
									"    pm.variables.set('AuthBearer', bearer);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthBearer}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Brad-Algorithm",
								"value": "{{alg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "b53712e4-419f-4197-8b39-5d480930cbf2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://proxy.api.prebanco.com.br/v1/contas/fornecimento/extratos?agencia=3995&conta=75557&tipo=cc&dataInicio=21012022&dataFim=24072022",
							"protocol": "https",
							"host": [
								"proxy",
								"api",
								"prebanco",
								"com",
								"br"
							],
							"path": [
								"v1",
								"contas",
								"fornecimento",
								"extratos"
							],
							"query": [
								{
									"key": "agencia",
									"value": "3995"
								},
								{
									"key": "conta",
									"value": "75557"
								},
								{
									"key": "tipo",
									"value": "cc"
								},
								{
									"key": "dataInicio",
									"value": "21012022"
								},
								{
									"key": "dataFim",
									"value": "24072022"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}