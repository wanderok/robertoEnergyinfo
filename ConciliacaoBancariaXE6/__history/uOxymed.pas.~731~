unit uOxymed;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, IdHTTP, IdSSL, IdSSLOpenSSL,
  Vcl.StdCtrls, IdGlobal, System.JSON,

  Winapi.ShellAPI,

  System.NetEncoding,


  System.IOUtils,
  System.Diagnostics,
  System.DateUtils,
  Vcl.Clipbrd,
//  ACBrDFeSSL,

IdCoderMIME,
  //synacode,

  IdException;


type

  TAmbiente = (aHomologacao, aProducao);

  TBradesco = class
  private
    FRazaoSocial: string;
    FClienteID: Integer;
    FCNPJ: string;
    FCertificadoDigital: string;
    FConta: String;
    FAgencia: String;
    FPastaDeTrabalho: String;
    FJWS: String;
    FJWT: String;
    FJWTBase64: String;
    FBearerToken: String;
    FHeader: String;
    FPayload: String;
    FHeaderBase64: String;
    FPayloadBase64: String;
    FClientKey: String;
    FAssinatura: String;
    FAssinaturaBase64URL: String;

    FRaizHomologacao:String;
    FRaizProducao:String;

    FAPIToken: String;
    FAPISaldo: String;
    FAPIExtrato: String;

    FArquivoChavePrivada: String;
    FArquivoChavePublica: String;

    FAmbiente: TAmbiente;

    procedure GerarParametros;
    procedure CriarHeader;
    procedure CriarHeaderBase64;

    procedure CriarPayload;
    procedure CriarPayloadBase64;

    procedure GerarTokenJWT;
    procedure GerarTokenJWTBase64;

    function GerarAssinatura: string;

    procedure GerarJWS;
    procedure GerarBearerToken;

    procedure GerarAssinaturaJWT;
    procedure RunCommand(const Command: string);
    function GetBase64FromFile(const FileName: string): string;

    procedure GravarParametrosGerados;

    function CodificarBase64(const Texto: string): string;

    procedure ExecutarComando(const Comando: string);
    function Base64ToBase64URL(const Base64: string): string;
    procedure CriarRequestTxt(const Metodo, Endpoint, Parametros, Body: string);
    function GetCurrentTimeInMilliseconds: Int64;
    procedure GeraTokenAssinado;

    procedure DefinirEndPoints;

    procedure CriarEExecutarBat;
    procedure CriarArquivoBat;
    procedure ExecutarArquivoBat;

    function ToBase64Url(const Input: string): string;

  public
    constructor Create;
    property Ambiente : TAmbiente read FAmbiente  write FAmbiente;
    property RazaoSocial: string read FRazaoSocial write FRazaoSocial;
    property ClienteID: Integer read FClienteID write FClienteID;
    property CNPJ: string read FCNPJ write FCNPJ;
    property CertificadoDigital: string read FCertificadoDigital
      write FCertificadoDigital;
    property Conta: string read FConta write FConta;
    property Agencia: string read FAgencia write FAgencia;
    property Header: string read FHeader write FHeader;
    property Payload: string read FPayload write FPayload;
    property HeaderBase64: String read FHeaderBase64 write FHeaderBase64;
    property PayloadBase64: String read FPayloadBase64 write FPayloadBase64;

    property JWS: string read FJWS write FJWS;
    property JWT: string read FJWT write FJWT;
    property JWTBase64: string read FJWTBase64 write FJWTBase64;
    property ClientKey: string read FClientKey write FClientKey;
    property BearerToken: string read FBearerToken write FBearerToken;
    property Assinatura: string read FAssinatura write FAssinatura;
    property AssinaturaBase64URL: string read FAssinaturaBase64URL write FAssinaturaBase64URL;
    property PastaDeTrabalho: string read FPastaDeTrabalho
      write FPastaDeTrabalho;

    property ArquivoChavePrivada: string read FArquivoChavePrivada
      write FArquivoChavePrivada;
    property ArquivoChavePublica: string read FArquivoChavePublica
      write FArquivoChavePublica;

    function Extrato(Inicio, Fim: TDateTime): String;
    procedure Iniciar;
  end;

implementation

function TBradesco.Base64ToBase64URL(const Base64: string): string;
begin
  result := StringReplace(Base64, '+', '-', [rfReplaceAll]);
  result := StringReplace(result, '/', '_', [rfReplaceAll]);
  result := StringReplace(result, '=', '', [rfReplaceAll]); // Remove paddings
end;

function TBradesco.CodificarBase64(const Texto: string): string;
begin
  result := ToBase64Url(Texto);

  //result := EncodeBase64(Texto); // TNetEncoding.Base64.Encode(Texto);
  //result := Base64ToBase64URL(result); // Converte de Base64 para Base64URL
end;

constructor TBradesco.Create;
begin
  self.FAmbiente := aHomologacao;
  self.FRaizHomologacao:= 'https://proxy.api.prebanco.com.br/';
  self.FRaizProducao:= 'https://openapi.bradesco.com.br/';
end;

procedure TBradesco.CriarArquivoBat;
var
  BatchFilePath, BatchFilePath64,  OpenSSLCommand, OpenSSLCommand64: string;
begin
  // Caminho onde o arquivo .bat será criado
  BatchFilePath := self.FPastaDeTrabalho+ '\executar_openssl.bat';

  // Comando que será inserido no arquivo .bat
  OpenSSLCommand := self.FPastaDeTrabalho+ '\openssl\bin\openssl.exe dgst -sha256 -keyform PEM -sign '+self.FPastaDeTrabalho+ '\oxymed.homologacao.key.pem -out '+self.FPastaDeTrabalho+ '\signature.base64.txt ' +self.FPastaDeTrabalho+ '\jwt.txt';
  //OpenSSLCommand := self.FPastaDeTrabalho+ '\openssl\bin\openssl.exe base64 -in '+ self.FPastaDeTrabalho+ '\signature.base64.txt -out ' + self.FPastaDeTrabalho+ '\signature.base64.txt';

//  CmdLine := '"C:\wander\openssl\bin\openssl.exe" dgst -sha256 -keyform PEM -sign "c:\wander\oxymed.homologacao.key.pem" -out "c:\wander\signature.base64.txt" "c:\wander\jwt.txt"';

  // Cria o arquivo .bat com o comando
  TFile.WriteAllText(BatchFilePath, OpenSSLCommand);

  BatchFilePath64 := self.FPastaDeTrabalho+ '\executar_openssl64.bat';
  OpenSSLCommand64 := self.FPastaDeTrabalho+ '\openssl\bin\openssl.exe base64 -in '+ self.FPastaDeTrabalho+ '\signature.base64.txt -out ' + self.FPastaDeTrabalho+ '\signature.base64ok.txt';
  TFile.WriteAllText(BatchFilePath64, OpenSSLCommand64);

  // Exibe uma mensagem informando que o arquivo foi criado
  ShowMessage('Arquivo .bat criado em: ' + BatchFilePath);
end;

procedure TBradesco.CriarEExecutarBat;
begin
  // Cria o arquivo .bat com o comando OpenSSL
  CriarArquivoBat;

  // Executa o arquivo .bat
  ExecutarArquivoBat;
end;

procedure TBradesco.CriarHeader;
var
  Header: TJSONObject;
begin
  Header := TJSONObject.Create;
  try
    Header.AddPair('alg', 'RS256');
    Header.AddPair('typ', 'JWT');
    self.FHeader := Header.ToString;
  finally
    Header.Free;
  end;

end;

procedure TBradesco.CriarHeaderBase64;
begin
  self.FHeaderBase64 := CodificarBase64(self.FHeader);
end;

//procedure TBradesco.CriarPayload;
//var
//  Payload: TJSONObject;
//  Pair: TJSONPair;
//  IAT, EXP, JTI: Int64;
//begin
//  IAT := Trunc(Now * 86400) + 25569;
//  EXP := IAT + 3600;
//  JTI := IAT * 1000;
//
////  Payload := TJSONObject.Create;
//  try
////    Pair := TJSONPair.Create('aud', self.FAPIToken);
////    Payload.AddPair(Pair);
////
////    Pair := TJSONPair.Create('sub', self.ClientKey);
////    Payload.AddPair(Pair);
////
////    Pair := TJSONPair.Create('iat', intToStr(IAT));
////    Payload.AddPair(Pair);
////
////    Pair := TJSONPair.Create('exp', intToStr(EXP));
////    Payload.AddPair(Pair);
////
////    Pair := TJSONPair.Create('jti', intToStr(JTI));
////    Payload.AddPair(Pair);
////
////    Pair := TJSONPair.Create('ver', '1.1');
////    Payload.AddPair(Pair);
////
////    self.FPayload := Payload.ToString;
//Payload := TJSONObject.Create;
//Payload.AddPair('aud', self.FAPIToken);
//Payload.AddPair('sub', self.ClientKey);
//Payload.AddPair('iat', IntToStr(IAT));
//Payload.AddPair('exp', IntToStr(EXP));
//Payload.AddPair('jti', IntToStr(JTI));
//Payload.AddPair('ver', '1.1');
//self.FPayload := Payload.ToString;
//
//  finally
//    Payload.Free;
//  end;
//end;

procedure TBradesco.CriarPayload;
var
  Payload: TJSONObject;
  Pair: TJSONPair;
  IAT, EXP, JTI: Int64;
begin
  // Calculando Unix Timestamp em segundos (remover a parte decimal)
  IAT := Trunc((Now - EncodeDate(1970, 1, 1)) * 86400);

  EXP := IAT + 3600;  // EXP é 1 hora após IAT
  JTI := IAT * 1000;  // JTI é o IAT em milissegundos

  // Criando o payload
  Payload := TJSONObject.Create;
  Payload.AddPair('aud', self.FAPIToken);
  Payload.AddPair('sub', self.ClientKey);
  Payload.AddPair('iat', IntToStr(IAT));
  Payload.AddPair('exp', IntToStr(EXP));
  Payload.AddPair('jti', IntToStr(JTI));
  Payload.AddPair('ver', '1.1');

  self.FPayload := Payload.ToString;

  // Libera o Payload
  Payload.Free;
end;


procedure TBradesco.CriarPayloadBase64;
begin
  self.FPayloadBase64 := CodificarBase64(self.FPayload);
end;

procedure TBradesco.CriarRequestTxt(const Metodo, Endpoint, Parametros,
  Body: string);
var
  RequestFile: string;
begin
  RequestFile := self.FPastaDeTrabalho + '\request.txt';
  TFile.WriteAllText(RequestFile, Metodo + #13#10 +
    Endpoint + #13#10 +
    Parametros + #13#10 +
    Body);
end;

procedure TBradesco.DefinirEndPoints;
begin
  if self.FAmbiente = aHomologacao then
  begin
     FAPIToken:= self.FRaizHomologacao+'auth/server/v1.1/token';
     FAPISaldo:= self.FRaizHomologacao+'saldo';
     FAPIExtrato:= self.FRaizHomologacao+'extrato';
  end
  else
  begin
     FAPIToken:= self.FRaizProducao+'auth/server/v1.1/token';
     FAPISaldo:= self.FRaizHomologacao+'saldo';
     FAPIExtrato:= self.FRaizHomologacao+'extrato';
  end;
end;

procedure TBradesco.ExecutarArquivoBat;
var
  BatchFilePath, BatchFilePath64: string;
begin
  // Caminho do arquivo .bat
  BatchFilePath := self.FPastaDeTrabalho + '\executar_openssl.bat';
  BatchFilePath64 := self.FPastaDeTrabalho + '\executar_openssl64.bat';

  // Verifica se o arquivo existe
  if not TFile.Exists(BatchFilePath) then
    raise Exception.Create('O arquivo .bat não foi encontrado: ' + BatchFilePath);

  // Executa o arquivo .bat
  ShellExecute(0, 'open', PChar(BatchFilePath), nil, nil, SW_HIDE);

  // Verifica se o arquivo existe
  if not TFile.Exists(BatchFilePath64) then
    raise Exception.Create('O arquivo .bat não foi encontrado: ' + BatchFilePath);

  // Executa o arquivo .bat
  ShellExecute(0, 'open', PChar(BatchFilePath64), nil, nil, SW_HIDE);


  // Mensagem informando que o arquivo foi executado
  ShowMessage('Arquivo .bat executado com sucesso.');
end;

procedure TBradesco.ExecutarComando(const Comando: string);
var
  StartupInfo: TStartupInfo;
  ProcessInfo: TProcessInformation;
  Cmd: string;
begin
  ZeroMemory(@StartupInfo, SizeOf(StartupInfo));
  StartupInfo.cb := SizeOf(StartupInfo);

  Cmd := 'cmd.exe /c ' + Comando; // O /c executa e fecha o cmd após a execução

  if not CreateProcess(nil, PChar(Cmd), nil, nil, False, 0, nil, nil,
    StartupInfo, ProcessInfo) then
  begin
    RaiseLastOSError; // Caso ocorra erro
  end;

  // Aguarda o processo terminar
  WaitForSingleObject(ProcessInfo.hProcess, INFINITE);
  CloseHandle(ProcessInfo.hProcess);
  CloseHandle(ProcessInfo.hThread);
end;

function TBradesco.Extrato(Inicio, Fim: TDateTime): String;
var
  IdHTTP: TIdHTTP;
  Response: string;
  BearerToken, Nonce: string;
  RequestStream, ResponseStream: TMemoryStream;
  HeaderBase64Url, PayloadBase64Url, Base64Signature: String;
begin
  try
    Nonce := intToStr(GetCurrentTimeInMilliseconds); // Exemplo com timestamp

    IdHTTP := TIdHTTP.Create(nil);
    IdHTTP.Request.CustomHeaders.Add('Authorization: Bearer ' +
      self.FBearerToken);
    IdHTTP.Request.CustomHeaders.Add('X-Brad-Nonce: ' + Nonce);
    IdHTTP.Request.CustomHeaders.Add('X-Brad-Signature: ' + self.FAssinatura);

    try
      Response := IdHTTP.Get(self.FAPIExtrato);
      Writeln('Resposta: ' + Response);
    except
      on E: EIdHTTPProtocolException do
        Writeln('Erro HTTP: ' + E.Message);
      on E: Exception do
        Writeln('Erro geral: ' + E.Message);
    end;

  finally
    IdHTTP.Free;
  end;
end;

//function TBradesco.GerarAssinatura: string;
//var
//  CmdLine, OutputFile, InputFile: string;
//  Base64Signature: string;
//  ProcessInfo: TProcessInformation;
//  StartupInfo: TStartupInfo;
//  ExitCode: DWORD;
//  Buffer: array [0 .. 1023] of AnsiChar;
//  BytesRead: DWORD;
//  OpenSSLPath: string;
//  CmdOutputFile: string;
//  TempSignatureFile: string;
//  HeaderBase64Url, PayloadBase64Url: string;
//begin
//{
//  Comando bradesco:
//
//  echo - n "$(cat JWT.txt)" | openssl dgst - sha256 - keyform pem -
//  sign oxymed.homologacao.key.pem | Base64 | td - d '=[space:]' | tr '+/' '-_'
//
//  erro: 'base64' não é reconhecido como um Comando interno ou externo,
//  um programa operável ou um arquivo em lotes.
//
//}
//
//  // Caminhos dos arquivos
//  InputFile := self.FPastaDeTrabalho + '\jwt.txt'; // O arquivo de entrada
//  TempSignatureFile := self.FPastaDeTrabalho + '\signature.bin';
//  // Arquivo temporário para assinatura binária
//  CmdOutputFile := self.FPastaDeTrabalho + '\signature.base64.bin';
//  // Arquivo final com assinatura em base64
//
//  // Caminho completo para o OpenSSL (adapte conforme a sua instalação)
//  OpenSSLPath := '"C:\Program Files\OpenSSL\bin\openssl.exe"';
//  // Exemplo, substitua pelo seu caminho real
//
//  // Comando OpenSSL para assinar o conteúdo
//  CmdLine := OpenSSLPath + ' dgst -sha256 -keyform pem -sign "' +
//    self.FPastaDeTrabalho + '\chaves\privada\oxymed.homologacao.key.pem" < "' +
//    InputFile + '" > "' + TempSignatureFile + '"';
//
//  CmdLine := 'echo -n "$(cat jwt.txt)" | openssl dgst -sha256 -keyform pem -sign oxymed.homologacao.key.pem | openssl base64 > assinatura_base64.txt';
//
////  CmdLine := 'echo -n "$(cat jwt.txt)" | openssl dgst -sha256 -keyform pem -sign oxymed.homologacao.key.pem > testeW.txt';
////  CmdLine := OpenSSLPath + ' dgst -sha256 -keyform pem -sign "' +
////    self.FPastaDeTrabalho + '\chaves\privada\oxymed.homologacao.key.pem" < "' +
////    InputFile + '" > "' + TempSignatureFile + '"';
//
//  TFile.WriteAllText(self.FPastaDeTrabalho + '\CmdLine2.txt', CmdLine);
//
//  // Inicializa as estruturas para o CreateProcess
//  ZeroMemory(@StartupInfo, SizeOf(StartupInfo));
//  StartupInfo.cb := SizeOf(StartupInfo);
//
//  // Cria o processo para executar o comando OpenSSL
//  if not CreateProcess(nil, PChar('cmd.exe /C ' + CmdLine), nil, nil, False,
//    CREATE_NO_WINDOW, nil, nil, StartupInfo, ProcessInfo) then
//  begin
//    ShowMessage('Erro ao executar OpenSSL: ' + SysErrorMessage(GetLastError));
//    Exit;
//  end;
//
//  // Aguarda a execução do comando
//  WaitForSingleObject(ProcessInfo.hProcess, INFINITE);
//  GetExitCodeProcess(ProcessInfo.hProcess, ExitCode);
//
//  // Verifica o código de saída do OpenSSL
//   if ExitCode <> 0 then
//   begin
//   ShowMessage('Erro ao executar OpenSSL. Código de saída: ' + IntToStr(ExitCode));
//   Exit;
//   end;
//
//  // Fechar handles
//  CloseHandle(ProcessInfo.hProcess);
//  CloseHandle(ProcessInfo.hThread);
//
//  // usar o CertUtil para codificar a assinatura binária em Base64
////  CmdLine := 'certutil -encode "' + TempSignatureFile + '" "' +
////    CmdOutputFile + '"';
//  //CmdLine := 'certutil -encode "teste.txt" "teste64.txt"';
//
//  // Inicializa novamente o processo para rodar o CertUtil
//  //if not CreateProcess(nil, PChar('cmd.exe /C ' + CmdLine), nil, nil, False,
//  //  CREATE_NO_WINDOW, nil, nil, StartupInfo, ProcessInfo) then
//  //begin
//  //  ShowMessage('Erro ao executar CertUtil: ' + SysErrorMessage(GetLastError));
//  //  Exit;
//  //end;
//
//  // Aguarda a execução do comando CertUtil
//  //WaitForSingleObject(ProcessInfo.hProcess, INFINITE);
//  //GetExitCodeProcess(ProcessInfo.hProcess, ExitCode);
//
//  // Verifica o código de saída do CertUtil
//  // if ExitCode <> 0 then
//  // begin
//  // ShowMessage('Erro ao executar CertUtil. Código de saída: ' + IntToStr(ExitCode));
//  // Exit;
//  // end;
//
//  // Fechar handles
//  //CloseHandle(ProcessInfo.hProcess);
//  //CloseHandle(ProcessInfo.hThread);
//
//  // Lê a assinatura Base64 do arquivo de saída
//  Base64Signature := TFile.ReadAllText('assinatura_base64.txt');//CmdOutputFile);
//
//  Base64Signature := Base64ToBase64URL(Base64Signature);
//
//  // Salva a assinatura gerada
//  self.FAssinatura := Base64Signature;
//end;

//function TBradesco.GerarAssinatura: string;
//var
//  CmdLine, OutputFile, InputFile: string;
//  Base64Signature: string;
//  ProcessInfo: TProcessInformation;
//  StartupInfo: TStartupInfo;
//  ExitCode: DWORD;
//  Buffer: array [0 .. 1023] of AnsiChar;
//  BytesRead: DWORD;
//  OpenSSLPath: string;
//  CmdOutputFile: string;
//  TempSignatureFile: string;
//  HeaderBase64Url, PayloadBase64Url: string;
//begin
//  // Caminhos dos arquivos
//  InputFile := self.FPastaDeTrabalho + '\jwt.txt'; // O arquivo de entrada
//  TempSignatureFile := self.FPastaDeTrabalho + '\signature.bin';
//  // Arquivo temporário para assinatura binária
//  CmdOutputFile := self.FPastaDeTrabalho + '\signature.base64.bin';
//  // Arquivo final com assinatura em base64
//
//  // Caminho completo para o OpenSSL (adapte conforme a sua instalação)
//  OpenSSLPath := '"C:\Program Files\OpenSSL\bin\openssl.exe"';
//  // Exemplo, substitua pelo seu caminho real
//
//  // Comando OpenSSL para assinar o conteúdo
//  //CmdLine := 'echo -n "$(cat jwt.txt)" | openssl dgst -sha256 -keyform pem -sign oxymed.homologacao.key.pem | openssl base64 > assinatura_base64.txt';
//
//  CmdLine := Format('type "%s" | "%s" dgst -sha256 -keyform pem -sign oxymed.homologacao.key.pem | "%s" base64 -out "%s"',
//  [InputFile, OpenSSLPath, OpenSSLPath, CmdOutputFile]);
//
//  TFile.WriteAllText(self.FPastaDeTrabalho + '\CmdLine2.txt', CmdLine);
//
//  // Inicializa as estruturas para o CreateProcess
//  ZeroMemory(@StartupInfo, SizeOf(StartupInfo));
//  StartupInfo.cb := SizeOf(StartupInfo);
//
//  // Cria o processo para executar o comando OpenSSL
//  if not CreateProcess(nil, PChar('cmd.exe /C ' + CmdLine), nil, nil, False,
//    CREATE_NO_WINDOW, nil, nil, StartupInfo, ProcessInfo) then
//  begin
//    ShowMessage('Erro ao executar OpenSSL: ' + SysErrorMessage(GetLastError));
//    Exit;
//  end;
//
//  // Aguarda a execução do comando
//  WaitForSingleObject(ProcessInfo.hProcess, INFINITE);
//  GetExitCodeProcess(ProcessInfo.hProcess, ExitCode);
//
//  // Verifica o código de saída do OpenSSL
//   if ExitCode <> 0 then
//   begin
//   ShowMessage('Erro ao executar OpenSSL. Código de saída: ' + IntToStr(ExitCode));
//   Exit;
//   end;
//
//  // Fechar handles
//  CloseHandle(ProcessInfo.hProcess);
//  CloseHandle(ProcessInfo.hThread);
//
//  // Lê a assinatura Base64 do arquivo de saída
//  Base64Signature := TFile.ReadAllText('assinatura_base64.txt');//CmdOutputFile);
//
//  Base64Signature := Base64ToBase64URL(Base64Signature);
//
//  // Salva a assinatura gerada
//  self.FAssinatura := Base64Signature;
//end;

//function TBradesco.GerarAssinatura: string;
//var
//  CmdLine: string;
//  ProcessInfo: TProcessInformation;
//  StartupInfo: TStartupInfo;
//  ExitCode: DWORD;
//  OpenSSLPath, InputFile, OutputFile, KeyFile: string;
//begin
//  // Caminhos dos arquivos
//  InputFile := self.FPastaDeTrabalho + '\jwt.txt'; // Caminho do arquivo de entrada
//  OutputFile := self.FPastaDeTrabalho + '\signature.base64.txt'; // Caminho do arquivo de saída
//  KeyFile := self.FPastaDeTrabalho + '\oxymed.homologacao.key.pem'; // Caminho da chave PEM
//
//  // Caminho do OpenSSL
//  //OpenSSLPath := 'C:\Program Files\OpenSSL-Win64\bin\openssl.exe'; // Caminho completo para o executável do OpenSSL
//  OpenSSLPath := 'openssl.exe'; // Caminho completo para o executável do OpenSSL
//
//  // Comando para o OpenSSL (adapte conforme necessário)
//  CmdLine := Format(
//    '"%s" dgst -sha256 -keyform PEM -sign "%s" < "%s" | "%s" base64 -out "%s"',
//    [OpenSSLPath, KeyFile, InputFile, OpenSSLPath, OutputFile]
//  );
//
//  // Inicializa as estruturas do CreateProcess
//  ZeroMemory(@StartupInfo, SizeOf(StartupInfo));
//  StartupInfo.cb := SizeOf(StartupInfo);
//  StartupInfo.dwFlags := STARTF_USESHOWWINDOW;
//  StartupInfo.wShowWindow := SW_HIDE; // Oculta a janela do console
//
//  // Cria o processo para executar o OpenSSL
//  if not CreateProcess(nil, PChar('cmd.exe /C ' + CmdLine), nil, nil, False,
//    CREATE_NO_WINDOW, nil, nil, StartupInfo, ProcessInfo) then
//  begin
//    raise Exception.Create('Erro ao executar OpenSSL: ' + SysErrorMessage(GetLastError));
//  end;
//
//  // Aguarda a conclusão do processo
//  WaitForSingleObject(ProcessInfo.hProcess, INFINITE);
//  GetExitCodeProcess(ProcessInfo.hProcess, ExitCode);
//
//  // Verifica o código de saída
//  if ExitCode <> 0 then
//  begin
//    raise Exception.Create('Erro ao executar OpenSSL. Código de saída: ' + IntToStr(ExitCode));
//  end;
//
//  // Fecha os handles do processo
//  CloseHandle(ProcessInfo.hProcess);
//  CloseHandle(ProcessInfo.hThread);
//
//  // Lê a assinatura em Base64 do arquivo de saída
//  if not TFile.Exists(OutputFile) then
//    raise Exception.Create('Arquivo de saída não encontrado: ' + OutputFile);
//
//  self.FAssinatura := TFile.ReadAllText(OutputFile).Trim; // Retorna o conteúdo do arquivo
//end;
//

function TBradesco.GerarAssinatura: string;
var
  CmdLine: string;
  StartupInfo: TStartupInfo;
  ProcessInfo: TProcessInformation;
  ExitCode: DWORD;
  OutputFile:String;
begin
    CriarEExecutarBat;

    OutputFile := self.FPastaDeTrabalho+ '\signature.base64ok.txt';

  if not TFile.Exists(OutputFile) then
  begin
    raise Exception.Create('Arquivo de saída não encontrado: ' + OutputFile);
  end;

  //self.FAssinatura := Base64ToBase64URL(TFile.ReadAllText(OutputFile).Trim); // Retorna o conteúdo do arquivo
  self.FAssinatura := TFile.ReadAllText(OutputFile).Trim; // Retorna o conteúdo do arquivo
  self.FAssinaturaBase64URL := ToBase64Url(self.FAssinatura);

  exit;
{
  // Caminho completo do OpenSSL
  CmdLine := 'C:\wander\openssl\bin\openssl.exe dgst -sha256 -keyform PEM -sign c:\wander\oxymed.homologacao.key.pem -out c:\wander\signature.base64.txt c:\wander\jwt.txt';

  // Configuração do processo
  ZeroMemory(@StartupInfo, SizeOf(StartupInfo));
  StartupInfo.cb := SizeOf(StartupInfo);
  StartupInfo.dwFlags := STARTF_USESHOWWINDOW;
  StartupInfo.wShowWindow := SW_HIDE;

  // Inicializa o processo
  ZeroMemory(@ProcessInfo, SizeOf(ProcessInfo));

  // Executa o comando usando cmd.exe
  if not CreateProcess(nil, PChar('cmd.exe /C ' + CmdLine), nil, nil, True,
    CREATE_NO_WINDOW, nil, nil, StartupInfo, ProcessInfo) then
  begin
    raise Exception.Create('Erro ao executar OpenSSL: ' + SysErrorMessage(GetLastError));
  end;

  // Aguarda a execução
  WaitForSingleObject(ProcessInfo.hProcess, INFINITE);
  GetExitCodeProcess(ProcessInfo.hProcess, ExitCode);

  // Verifica o código de saída
  if ExitCode <> 0 then
    raise Exception.Create('Erro do OpenSSL. Código de saída: ' + IntToStr(ExitCode));

  // Fecha os handles do processo
  CloseHandle(ProcessInfo.hProcess);
  CloseHandle(ProcessInfo.hThread);

  // Retorna o caminho do arquivo de assinatura gerado
  Result := 'c:\wander\signature.base64.txt';
  }
end;


procedure TBradesco.GerarParametros;
begin

  DefinirEndPoints;

  CriarHeader;
  CriarHeaderBase64;

  CriarPayload;
  CriarPayloadBase64;

  GerarTokenJWT;
  GerarTokenJWTBase64;

  GerarAssinatura;
  //GerarAssinaturaJWT;
  GerarJWS;

  GerarBearerToken;

  GravarParametrosGerados;
end;

procedure TBradesco.GerarBearerToken;
var
  IdHTTP: TIdHTTP;
  Response: string;
  Body: string;
  StringStream: TStringStream;
  SSLHandler: TIdSSLIOHandlerSocketOpenSSL;
begin
  IdHTTP := TIdHTTP.Create(nil);
  SSLHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  StringStream := TStringStream.Create('');

  try
    IdHTTP.IOHandler := SSLHandler;

    SSLHandler.SSLOptions.SSLVersions := [sslvTLSv1_2];  // Usando TLS 1.2

    Body := 'grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&' +
            'assertion=' + self.FJWS;

    StringStream.WriteString(Body);
    StringStream.Position := 0;

    IdHTTP.Request.CustomHeaders.Add('Content-Type: application/x-www-form-urlencoded');

    try
      Response := IdHTTP.Post(self.FAPIToken, StringStream);
      self.FBearerToken := Response;
    except
      on E: EIdHTTPProtocolException do
        self.FBearerToken := 'Erro HTTP: ' + E.Message;
      on E: Exception do
        self.FBearerToken := 'Erro geral: ' + E.Message;
    end;

  finally
    StringStream.Free;
    SSLHandler.Free;
    IdHTTP.Free;
  end;
end;

procedure TBradesco.GerarTokenJWT;
begin
  self.FJWT := self.FHeader + '.' + self.FPayload;
end;

procedure TBradesco.GerarTokenJWTBase64;
begin
  //self.FJWTBase64 := CodificarBase64(self.FJWT);
  self.FJWTBase64 := CodificarBase64(self.FHeader)+'.'+CodificarBase64(self.FPayload);
  //self.FJWTBase64 := ToBase64Url(self.FHeader)+'.'+ToBase64Url(self.FPayload);
end;

procedure TBradesco.GeraTokenAssinado;
begin
end;

function TBradesco.GetCurrentTimeInMilliseconds: Int64;
begin
  result := DateTimeToUnix(Now) * 1000;
end;

procedure TBradesco.GravarParametrosGerados;
begin
  TFile.WriteAllText(self.FPastaDeTrabalho + '\header.txt', self.FHeader);
  TFile.WriteAllText(self.FPastaDeTrabalho + '\payload.txt', self.FPayload);

  TFile.WriteAllText(self.FPastaDeTrabalho + '\headerBase64.txt',
    self.FHeaderBase64);
  TFile.WriteAllText(self.FPastaDeTrabalho + '\payloadBase64.txt',
    self.FPayloadBase64);

  TFile.WriteAllText(self.FPastaDeTrabalho + '\jwt.txt', self.FJWT);
  TFile.WriteAllText(self.FPastaDeTrabalho + '\jwtBase64.txt', self.FJWTBase64);

  TFile.WriteAllText(self.FPastaDeTrabalho + '\AssinaturaOK.txt',
    self.FAssinatura);

  TFile.WriteAllText(self.FPastaDeTrabalho + '\jws.txt', self.FJWS);

  TFile.WriteAllText(self.FPastaDeTrabalho + '\BearerToken.txt',
    self.FBearerToken);
end;

procedure TBradesco.Iniciar;
begin
  GerarParametros;
end;

procedure TBradesco.GerarJWS;
begin
  self.FJWS := self.FHeaderBase64 + '.' + self.FPayloadBase64+ '.' +self.FAssinaturaBase64URL;
  // + '.' +
  //'EuXYGh-QKmWEM34luCw9JMBQ41n9spcwl7_Xmv1euACK3-CRmE8h7jHFpA99D1HFoKV7hcuP0RuiqjIC5tADQDWoTu2Fo8YjbpqLu_rqAdxrsvjiPID6mcD9nk1-acBWAQ3TZOq3Dz6WYUa7uYnejeAOq67gs8zyTF6hI-tG5yfRO8-GD-OlaqXToYSjQXD_q4936e1D-hCtXiylCUKL9C7OGkB7ovPCMihWZdN8hbwEnc7Q0yLkrP06MnMnkOI-0YQ4VBEjCiLp3jNpXd8WFItGbYonytFPr0-Czqq7Iyg15x-5ZXTLcjUPN1pujgPHrGvA1UANaQN4Eg80H-Ledw';

//  self.FAssinaturaBase64URL;
end;

procedure TBradesco.GerarAssinaturaJWT;
var
  HeaderBase64Url, PayloadBase64Url, Combined, Command: string;
  OpenSSLPath: string;
  Base64Signature: string;
  ResultCode: Integer;
  PayloadJson: string;
  JsonFileName: string;

procedure CreateTemporaryJsonFile(const AJsonContent: string; const AFileName: string);
var
  JsonFile: TextFile;
begin
  AssignFile(JsonFile, AFileName);
  Rewrite(JsonFile);
  WriteLn(JsonFile, AJsonContent);
  CloseFile(JsonFile);
end;

begin
  try
    OpenSSLPath := self.FPastaDeTrabalho + '\OpenSSL-Win64\bin\openssl.exe';

    PayloadJson := self.FHeader +'.' +self.FPayload;

    JsonFileName := self.FPastaDeTrabalho + '\temp_payload.json';

    CreateTemporaryJsonFile(PayloadJson, JsonFileName);
//
//    HeaderBase64Url := Base64ToBase64URL(self.FHeader);
//    PayloadBase64Url := Base64ToBase64URL(self.FPayload);

    HeaderBase64Url := ToBase64Url(self.FHeader);
    PayloadBase64Url := ToBase64Url(self.FPayload);

    Combined := HeaderBase64Url + '.' + PayloadBase64Url;

    Command := OpenSSLPath + ' dgst -sha256 -sign "' +
             self.FPastaDeTrabalho + '\chaves\privada\oxymed.homologacao.key.pem" ' +
             '-out "' + self.FPastaDeTrabalho + '\signatureJWS.bin" ' +
             '"' + JsonFileName + '"';

    RunCommand(Command);

    if not FileExists(self.FPastaDeTrabalho + '\signatureJWS.bin') then
    begin
      ShowMessage('Arquivo de assinatura não encontrado!');
      Exit;
    end;

    Base64Signature := GetBase64FromFile(self.FPastaDeTrabalho + '\signatureJWS.bin');
    self.FAssinatura := Base64Signature;
    self.FAssinaturaBase64URL := Base64ToBase64URL(Base64Signature);

    //self.FAssinaturaBase64URL := self.FAssinaturaBase64URL;
  except
    ShowMessage('Erro ao gerar assinatura JWT');
  end;
end;
procedure TBradesco.RunCommand(const Command: string);
var
  ProcessInfo: TProcessInformation;
  StartupInfo: TStartupInfo;
  ExitCode: DWORD;
begin
  ZeroMemory(@StartupInfo, SizeOf(StartupInfo));
  StartupInfo.cb := SizeOf(StartupInfo);

  if not CreateProcess(nil, PChar('cmd.exe /C ' + Command), nil, nil, False,
    CREATE_NO_WINDOW, nil, nil, StartupInfo, ProcessInfo) then
  begin
    ShowMessage('Erro ao executar o comando: ' + SysErrorMessage(GetLastError));
    Exit;
  end;

  WaitForSingleObject(ProcessInfo.hProcess, INFINITE);
  GetExitCodeProcess(ProcessInfo.hProcess, ExitCode);

  if ExitCode <> 0 then
  begin
    ShowMessage('Erro ao executar o comando. Código de saída: ' +
      intToStr(ExitCode));
    Exit;
  end;

  CloseHandle(ProcessInfo.hProcess);
  CloseHandle(ProcessInfo.hThread);
end;

function TBradesco.ToBase64Url(const Input: string): string;
var
  Base64: string;
begin
  // Codifica o texto em Base64
  Base64 := TNetEncoding.Base64.Encode(Input);

  // Adapta para o formato Base64URL
  Result := Base64
    .Replace('+', '-', [rfReplaceAll])
    .Replace('/', '_', [rfReplaceAll])
    .TrimRight(['=']);
end;

function TBradesco.GetBase64FromFile(const FileName: string): string;
var
  FileStream: TFileStream;
  MemoryStream: TMemoryStream;
  Encoder: TIdEncoderMIME;
begin
  FileStream := TFileStream.Create(FileName, fmOpenRead);
  try
    MemoryStream := TMemoryStream.Create;
    try
      MemoryStream.CopyFrom(FileStream, FileStream.Size);

      Encoder := TIdEncoderMIME.Create(nil);
      try
        Result := Encoder.Encode(MemoryStream);
      finally
        Encoder.Free;
      end;
    finally
      MemoryStream.Free;
    end;
  finally
    FileStream.Free;
  end;
end;

end.


{
https://jwt.io/
https://www.timestamp-converter.com/

}
{
  As credenciais do ambiente de homologação já foram criadas, segue abaixo:
  Client Key: 9693f06b-b929-4a9c-8182-e25270c4029d
  Client Secret: 7cb3d3eb-a2c9-4084-8e03-72230000b4dd
  https://proxy.api.prebanco.com.br/auth/server/v1.1/token
}

//c:\wander\OpenSSL-Win64\bin\openssl.exe dgst -sha256 -keyform pem -sign "c:\wander\chaves\privada\oxymed.homologacao.key.pem" < "{"alg":"RS256","typ":"JWT"}.{"aud":"https:__proxy.api.prebanco.com.br_auth_server_v1.1_token","sub":"9693f06b-b929-4a9c-8182-e25270c4029d","iat":"3946727048","exp":"3946730648","jti":"3946727048000","ver":"1.1"}" > "c:\wander\signatureJWS.bin"
//c:\wander\OpenSSL-Win64\bin\openssl.exe dgst -sha256 -keyform pem -sign "c:\wander\chaves\privada\oxymed.homologacao.key.pem" -in "c:\wander\temp_payload.json" -out "c:\wander\signatureJWS.bin"


o payload precisa ter as seguintes pares:
aud
sub
iat
exp
jti
ver


